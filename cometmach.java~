/* The following code was generated by JFlex 1.6.1 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Antonio Perdomo/Documents/Compiladores I/Proyecto/lexer.flex</tt>
 */
class cometmach {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\37\1\37\1\37\1\37\22\0\1\36\1\0\5\0\1\21"+
    "\2\0\1\33\1\32\1\30\1\34\1\0\1\3\12\2\1\0\1\6"+
    "\1\0\1\5\1\0\2\0\32\1\1\25\1\0\1\26\3\0\1\24"+
    "\1\16\1\1\1\1\1\23\1\10\2\1\1\1\2\1\1\20\1\13"+
    "\1\11\1\17\1\1\1\1\1\22\1\14\1\7\1\12\1\1\1\1"+
    "\1\35\1\15\1\1\1\27\1\4\1\31\7\0\1\37\u1fa2\0\1\37"+
    "\1\37\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\6\1\1\2\31\0\1\3\31\0\1\4\5\0"+
    "\1\5\16\0\1\6\10\0\1\7\50\0\1\10\5\0"+
    "\1\11\42\0\1\12\5\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\40\0\100\0\140\0\200\0\240\0\300\0\40"+
    "\0\100\0\340\0\u0100\0\u0120\0\u0140\0\u0160\0\u0180\0\u01a0"+
    "\0\u01c0\0\u01e0\0\u0200\0\u0220\0\u0240\0\u0260\0\u0280\0\u02a0"+
    "\0\u02c0\0\u02e0\0\u0300\0\u0320\0\u0340\0\u0360\0\u0380\0\u03a0"+
    "\0\u03c0\0\40\0\u03e0\0\u0400\0\u0420\0\u0440\0\u0460\0\u0480"+
    "\0\u04a0\0\u04c0\0\u04e0\0\u0500\0\u0520\0\u0540\0\u0560\0\u0580"+
    "\0\u05a0\0\u05c0\0\u05e0\0\u0600\0\u0620\0\u0640\0\u0660\0\u0680"+
    "\0\u06a0\0\u06c0\0\u06e0\0\40\0\u0700\0\u0720\0\u0740\0\u0760"+
    "\0\u0780\0\40\0\u07a0\0\u07c0\0\u07e0\0\u0800\0\u0820\0\u0840"+
    "\0\u0860\0\u0880\0\u08a0\0\u08c0\0\u08e0\0\u0900\0\u0920\0\u0940"+
    "\0\40\0\u0960\0\u0980\0\u09a0\0\u09c0\0\u09e0\0\u0a00\0\u0a20"+
    "\0\u0a40\0\40\0\u0a60\0\u0a80\0\u0aa0\0\u0ac0\0\u0ae0\0\u0b00"+
    "\0\u0b20\0\u0b40\0\u0b60\0\u0b80\0\u0ba0\0\u0bc0\0\u0be0\0\u0c00"+
    "\0\u0c20\0\u0c40\0\u0c60\0\u0c80\0\u0ca0\0\u0cc0\0\u0ce0\0\u0d00"+
    "\0\u0d20\0\u0d40\0\u0d60\0\u0d80\0\u0da0\0\u0dc0\0\u0de0\0\u0e00"+
    "\0\u0e20\0\u0e40\0\u0e60\0\u0e80\0\u0ea0\0\u0ec0\0\u0ee0\0\u0f00"+
    "\0\u0f20\0\u0f40\0\40\0\u0f60\0\u0f80\0\u0fa0\0\u0fc0\0\u0fe0"+
    "\0\40\0\u1000\0\u1020\0\u1040\0\u1060\0\u1080\0\u10a0\0\u10c0"+
    "\0\u10e0\0\u1100\0\u1120\0\u1140\0\u1160\0\u1180\0\u11a0\0\u11c0"+
    "\0\u11e0\0\u1200\0\u1220\0\u1240\0\u1260\0\u1280\0\u12a0\0\u12c0"+
    "\0\u12e0\0\u1300\0\u1320\0\u1340\0\u1360\0\u1380\0\u13a0\0\u13c0"+
    "\0\u13e0\0\u1400\0\u1420\0\40\0\u1440\0\u1460\0\u1480\0\u14a0"+
    "\0\u14c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\5\2\1\4\1\3\1\5\2\3\1\6"+
    "\1\3\1\7\2\3\1\2\3\3\10\2\1\3\1\2"+
    "\1\10\41\0\1\11\1\12\2\0\1\13\1\0\12\11"+
    "\1\0\3\11\1\14\7\0\1\11\3\0\1\11\1\12"+
    "\2\0\1\13\1\0\1\11\1\15\10\11\1\0\3\11"+
    "\1\14\7\0\1\11\3\0\1\11\1\12\2\0\1\13"+
    "\1\0\3\11\1\16\6\11\1\0\3\11\1\14\7\0"+
    "\1\11\3\0\1\11\1\12\2\0\1\13\1\0\6\11"+
    "\1\17\3\11\1\0\3\11\1\14\7\0\1\11\3\0"+
    "\1\11\1\12\2\0\1\13\1\0\10\11\1\20\1\11"+
    "\1\0\3\11\1\14\7\0\1\11\4\0\1\12\2\0"+
    "\1\13\17\0\1\14\13\0\1\21\1\22\4\0\1\23"+
    "\1\24\10\21\1\25\3\21\10\0\1\21\3\0\1\26"+
    "\1\27\4\0\12\26\1\0\3\26\10\0\1\26\3\0"+
    "\1\11\1\12\2\0\1\13\1\0\12\11\1\0\3\11"+
    "\1\14\7\0\1\11\1\30\2\0\1\11\1\12\2\0"+
    "\1\13\1\0\4\11\1\31\5\11\1\0\3\11\1\14"+
    "\7\0\1\11\3\0\1\11\1\12\2\0\1\13\1\0"+
    "\4\11\1\32\5\11\1\0\3\11\1\14\7\0\1\11"+
    "\3\0\1\11\1\12\2\0\1\13\1\0\12\11\1\0"+
    "\3\11\1\14\7\0\1\33\3\0\1\21\1\34\1\35"+
    "\3\0\12\21\1\0\3\21\5\0\1\36\1\37\1\40"+
    "\1\21\4\0\1\41\1\35\2\0\1\42\23\0\1\36"+
    "\1\37\1\40\4\0\1\21\1\34\1\35\3\0\12\21"+
    "\1\0\1\43\2\21\5\0\1\36\1\37\1\40\1\21"+
    "\3\0\1\21\1\34\1\35\3\0\12\21\1\0\2\21"+
    "\1\44\5\0\1\36\1\37\1\40\1\21\3\0\4\45"+
    "\2\0\12\45\1\0\3\45\5\0\2\45\1\0\1\45"+
    "\3\0\1\26\1\46\4\0\12\26\1\0\3\26\1\0"+
    "\1\47\6\0\1\26\4\0\1\27\23\0\1\50\12\0"+
    "\1\51\5\0\12\51\1\0\3\51\10\0\1\51\3\0"+
    "\1\11\1\12\2\0\1\13\1\0\12\11\1\0\3\11"+
    "\1\14\7\0\1\11\1\52\2\0\1\11\1\12\2\0"+
    "\1\13\1\0\7\11\1\53\2\11\1\0\3\11\1\14"+
    "\7\0\1\11\3\0\1\11\1\12\2\0\1\13\1\0"+
    "\12\11\1\0\3\11\1\14\7\0\1\11\1\54\3\0"+
    "\1\34\1\35\26\0\1\36\1\37\1\40\4\0\1\55"+
    "\1\56\4\0\12\55\1\0\3\55\10\0\1\55\3\0"+
    "\1\57\1\60\4\0\12\57\1\0\3\57\10\0\1\57"+
    "\3\0\1\61\1\62\4\0\12\61\1\0\3\61\10\0"+
    "\1\61\3\0\1\63\1\64\4\0\12\63\1\0\3\63"+
    "\10\0\1\63\4\0\1\41\3\0\1\42\32\0\1\21"+
    "\1\34\1\35\3\0\3\21\1\65\6\21\1\0\3\21"+
    "\5\0\1\36\1\37\1\40\1\21\3\0\1\21\1\34"+
    "\1\35\3\0\11\21\1\66\1\0\3\21\5\0\1\36"+
    "\1\37\1\40\1\21\23\0\1\67\20\0\1\46\23\0"+
    "\1\47\16\0\1\70\37\0\1\71\33\0\1\51\1\72"+
    "\2\0\1\73\1\74\12\51\1\0\3\51\10\0\1\51"+
    "\3\0\1\75\5\0\12\75\1\0\3\75\10\0\1\75"+
    "\3\0\1\11\1\12\2\0\1\13\1\0\10\11\1\76"+
    "\1\11\1\0\3\11\1\14\7\0\1\11\11\0\1\77"+
    "\1\0\1\100\2\0\1\101\24\0\1\55\1\56\1\35"+
    "\2\0\1\102\12\55\1\0\3\55\10\0\1\55\3\0"+
    "\1\103\1\56\1\35\2\0\1\102\12\103\1\0\3\103"+
    "\10\0\1\103\3\0\1\57\1\60\3\0\1\102\12\57"+
    "\1\0\3\57\5\0\1\36\2\0\1\57\3\0\1\104"+
    "\1\60\3\0\1\102\12\104\1\0\3\104\5\0\1\36"+
    "\2\0\1\104\3\0\1\61\1\62\3\0\1\102\12\61"+
    "\1\0\3\61\6\0\1\37\1\0\1\61\3\0\1\105"+
    "\1\62\3\0\1\102\12\105\1\0\3\105\6\0\1\37"+
    "\1\0\1\105\3\0\1\63\1\64\3\0\1\102\12\63"+
    "\1\0\3\63\7\0\1\40\1\63\3\0\1\106\1\64"+
    "\3\0\1\102\12\106\1\0\3\106\7\0\1\40\1\106"+
    "\3\0\1\21\1\34\1\35\3\0\12\21\1\0\1\21"+
    "\1\107\1\21\5\0\1\36\1\37\1\40\1\21\3\0"+
    "\1\21\1\34\1\35\3\0\5\21\1\65\4\21\1\0"+
    "\3\21\5\0\1\36\1\37\1\40\1\21\10\0\1\42"+
    "\33\0\1\110\4\0\1\111\1\112\10\0\1\113\20\0"+
    "\1\110\4\0\1\111\1\112\10\0\1\113\5\0\1\114"+
    "\12\0\1\72\2\0\1\73\1\74\40\0\1\115\1\116"+
    "\30\0\1\75\1\117\2\0\1\120\1\121\12\75\1\0"+
    "\3\75\10\0\1\75\3\0\1\11\1\12\2\0\1\13"+
    "\1\0\11\11\1\122\1\0\3\11\1\14\7\0\1\11"+
    "\12\0\1\123\41\0\1\124\42\0\1\125\23\0\1\103"+
    "\1\126\1\35\3\0\12\103\1\0\3\103\10\0\1\103"+
    "\3\0\1\104\1\127\4\0\12\104\1\0\3\104\5\0"+
    "\1\36\2\0\1\104\3\0\1\105\1\130\4\0\12\105"+
    "\1\0\3\105\6\0\1\37\1\0\1\105\3\0\1\106"+
    "\1\131\4\0\12\106\1\0\3\106\7\0\1\40\1\106"+
    "\3\0\1\21\1\34\1\35\2\0\1\42\12\21\1\0"+
    "\3\21\5\0\1\36\1\37\1\40\1\21\4\0\1\110"+
    "\3\0\1\132\53\0\1\133\41\0\1\134\14\0\4\135"+
    "\2\0\12\135\1\0\3\135\5\0\2\135\1\0\1\135"+
    "\4\0\1\136\4\0\1\137\1\140\10\0\1\141\6\0"+
    "\1\142\31\0\1\143\41\0\1\144\15\0\1\117\2\0"+
    "\1\120\1\121\33\0\1\145\36\0\1\11\1\12\2\0"+
    "\1\13\1\0\12\11\1\0\3\11\1\14\7\0\1\11"+
    "\1\146\37\0\1\147\14\0\1\123\37\0\1\150\26\0"+
    "\1\126\1\35\36\0\1\127\27\0\1\36\7\0\1\130"+
    "\30\0\1\37\6\0\1\131\31\0\1\40\15\0\1\151"+
    "\45\0\1\152\40\0\1\153\20\0\1\136\25\0\1\154"+
    "\31\0\1\155\41\0\1\156\14\0\4\157\2\0\12\157"+
    "\1\0\3\157\5\0\2\157\1\0\1\157\4\0\1\160"+
    "\4\0\1\161\1\162\10\0\1\163\30\0\1\164\45\0"+
    "\1\165\21\0\1\145\3\0\1\121\32\0\1\166\5\0"+
    "\12\166\1\0\3\166\10\0\1\166\3\0\1\167\5\0"+
    "\12\167\1\0\3\167\10\0\1\167\20\0\1\170\44\0"+
    "\1\153\30\0\1\151\31\0\1\132\33\0\1\160\47\0"+
    "\1\171\45\0\1\172\40\0\1\173\20\0\1\160\25\0"+
    "\1\154\1\174\30\0\1\175\41\0\1\176\14\0\4\177"+
    "\2\0\12\177\1\0\3\177\5\0\2\177\1\0\1\177"+
    "\25\0\1\200\30\0\1\164\24\0\1\166\1\201\2\0"+
    "\1\202\1\203\12\166\1\0\3\166\10\0\1\166\3\0"+
    "\1\167\1\204\4\0\12\167\1\0\3\167\1\205\7\0"+
    "\1\167\21\0\1\206\43\0\1\207\30\0\1\171\53\0"+
    "\1\210\15\0\1\211\43\0\1\212\45\0\1\213\40\0"+
    "\1\214\24\0\1\74\33\0\1\201\2\0\1\202\1\203"+
    "\52\0\1\215\20\0\1\204\22\0\1\205\14\0\1\216"+
    "\55\0\1\123\47\0\1\217\30\0\1\163\41\0\1\220"+
    "\30\0\1\212\44\0\1\141\6\0\1\210\1\174\7\0"+
    "\4\221\2\0\12\221\1\0\3\221\5\0\2\221\1\0"+
    "\1\221\4\0\1\216\23\0\1\222\20\0\1\161\1\162"+
    "\36\0\1\137\1\140\17\0\1\217\1\174\27\0\1\223"+
    "\23\0\1\224\40\0\1\203\60\0\1\225\12\0\1\226"+
    "\4\0\1\227\1\230\10\0\1\231\6\0\1\232\11\0"+
    "\1\226\25\0\1\233\31\0\1\234\41\0\1\235\14\0"+
    "\4\236\2\0\12\236\1\0\3\236\5\0\2\236\1\0"+
    "\1\236\4\0\1\237\4\0\1\240\1\241\10\0\1\242"+
    "\20\0\1\237\47\0\1\243\45\0\1\244\40\0\1\245"+
    "\20\0\1\237\25\0\1\233\1\246\30\0\1\247\41\0"+
    "\1\250\14\0\4\251\2\0\12\251\1\0\3\251\5\0"+
    "\2\251\1\0\1\251\25\0\1\252\30\0\1\243\53\0"+
    "\1\253\15\0\1\254\43\0\1\255\45\0\1\256\40\0"+
    "\1\257\46\0\1\260\30\0\1\242\41\0\1\261\30\0"+
    "\1\255\44\0\1\231\6\0\1\253\1\246\15\0\1\240"+
    "\1\241\36\0\1\227\1\230\17\0\1\260\1\246\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5344];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\31\0\1\11\31\0\1\11"+
    "\5\0\1\11\16\0\1\11\10\0\1\11\50\0\1\11"+
    "\5\0\1\11\42\0\1\11\5\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  cometmach(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 11: break;
          case 2: 
            { System.out.print(yytext());
            }
          case 12: break;
          case 3: 
            { System.out.println("Var Assignation Correct: "+yytext());
            }
          case 13: break;
          case 4: 
            { System.out.println("TF Correct: "+yytext());
            }
          case 14: break;
          case 5: 
            { System.out.println("Operation Correct: "+yytext());
            }
          case 15: break;
          case 6: 
            { System.out.println("Num Correct: "+yytext());
            }
          case 16: break;
          case 7: 
            { System.out.println("Box Unit Assignation Correct: "+yytext());
            }
          case 17: break;
          case 8: 
            { System.out.println("Symbol Correct: "+yytext());
            }
          case 18: break;
          case 9: 
            { System.out.println("Box Assignation Correct: "+yytext());
            }
          case 19: break;
          case 10: 
            { System.out.println("Box Correct: "+yytext());
            }
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java cometmach [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        cometmach scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new cometmach(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
