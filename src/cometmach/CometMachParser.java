
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 05 07:03:02 CST 2018
//----------------------------------------------------

package cometmach;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 05 07:03:02 CST 2018
  */
public class CometMachParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CometMachParser() {super();}

  /** Constructor which sets the default scanner. */
  public CometMachParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CometMachParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\354\000\002\002\004\000\002\214\004\000\002\221" +
    "\002\000\002\214\006\000\002\222\002\000\002\117\011" +
    "\000\002\120\004\000\002\120\004\000\002\120\004\000" +
    "\002\120\004\000\002\120\004\000\002\120\004\000\002" +
    "\120\004\000\002\120\004\000\002\121\003\000\002\121" +
    "\002\000\002\163\003\000\002\163\002\000\002\161\004" +
    "\000\002\161\004\000\002\162\003\000\002\162\002\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\003\003\000\002\025" +
    "\003\000\002\011\003\000\002\017\003\000\002\033\003" +
    "\000\002\004\005\000\002\026\005\000\002\012\005\000" +
    "\002\020\005\000\002\034\005\000\002\216\005\000\002" +
    "\216\003\000\002\215\003\000\002\217\003\000\002\217" +
    "\005\000\002\217\005\000\002\217\005\000\002\217\005" +
    "\000\002\217\005\000\002\217\005\000\002\142\003\000" +
    "\002\143\004\000\002\143\003\000\002\144\004\000\002" +
    "\145\004\000\002\132\003\000\002\133\004\000\002\133" +
    "\003\000\002\134\004\000\002\135\004\000\002\136\003" +
    "\000\002\137\004\000\002\137\003\000\002\140\004\000" +
    "\002\141\004\000\002\147\003\000\002\150\004\000\002" +
    "\150\003\000\002\151\004\000\002\152\004\000\002\153" +
    "\003\000\002\154\004\000\002\154\003\000\002\155\004" +
    "\000\002\156\004\000\002\146\003\000\002\146\003\000" +
    "\002\157\003\000\002\157\003\000\002\122\003\000\002" +
    "\125\006\000\002\125\007\000\002\126\006\000\002\126" +
    "\007\000\002\127\006\000\002\127\007\000\002\131\006" +
    "\000\002\131\007\000\002\130\006\000\002\130\007\000" +
    "\002\123\005\000\002\123\005\000\002\123\005\000\002" +
    "\123\005\000\002\123\005\000\002\124\004\000\002\160" +
    "\004\000\002\160\004\000\002\160\004\000\002\160\004" +
    "\000\002\160\004\000\002\160\004\000\002\160\004\000" +
    "\002\042\003\000\002\043\004\000\002\043\004\000\002" +
    "\043\004\000\002\043\004\000\002\043\004\000\002\043" +
    "\004\000\002\043\004\000\002\044\005\000\002\044\010" +
    "\000\002\223\002\000\002\044\005\000\002\224\002\000" +
    "\002\044\006\000\002\051\003\000\002\052\005\000\002" +
    "\054\003\000\002\054\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\060\003\000\002\061\005\000\002\061\003\000" +
    "\002\066\004\000\002\066\004\000\002\066\004\000\002" +
    "\066\004\000\002\066\004\000\002\066\004\000\002\066" +
    "\004\000\002\066\004\000\002\067\003\000\002\067\002" +
    "\000\002\062\003\000\002\065\005\000\002\065\011\000" +
    "\002\063\006\000\002\064\004\000\002\225\002\000\002" +
    "\064\006\000\002\055\003\000\002\056\007\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\070\003" +
    "\000\002\073\005\000\002\071\006\000\002\072\004\000" +
    "\002\226\002\000\002\072\006\000\002\074\003\000\002" +
    "\100\005\000\002\076\006\000\002\077\004\000\002\227" +
    "\002\000\002\077\006\000\002\110\003\000\002\110\003" +
    "\000\002\105\003\000\002\111\005\000\002\106\006\000" +
    "\002\107\004\000\002\230\002\000\002\107\006\000\002" +
    "\115\004\000\002\116\003\000\002\116\002\000\002\112" +
    "\003\000\002\114\005\000\002\113\004\000\002\101\003" +
    "\000\002\104\006\000\002\102\006\000\002\103\004\000" +
    "\002\231\002\000\002\103\006\000\002\203\003\000\002" +
    "\203\003\000\002\203\003\000\002\203\003\000\002\203" +
    "\003\000\002\177\003\000\002\200\004\000\002\200\003" +
    "\000\002\201\005\000\002\202\005\000\002\202\004\000" +
    "\002\170\004\000\002\170\004\000\002\170\004\000\002" +
    "\170\004\000\002\170\004\000\002\170\004\000\002\170" +
    "\004\000\002\170\004\000\002\170\004\000\002\171\003" +
    "\000\002\171\002\000\002\172\004\000\002\213\003\000" +
    "\002\213\003\000\002\213\003\000\002\213\003\000\002" +
    "\213\003\000\002\213\003\000\002\213\003\000\002\207" +
    "\003\000\002\210\004\000\002\210\003\000\002\211\004" +
    "\000\002\212\004\000\002\212\003\000\002\204\003\000" +
    "\002\205\003\000\002\206\006\000\002\206\007\000\002" +
    "\232\002\000\002\206\006\000\002\233\002\000\002\206" +
    "\011\000\002\164\003\000\002\167\005\000\002\165\006" +
    "\000\002\166\006\000\002\234\002\000\002\166\005\000" +
    "\002\173\003\000\002\176\005\000\002\174\006\000\002" +
    "\175\005\000\002\235\002\000\002\175\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01b2\000\006\003\005\027\004\001\002\000\004\023" +
    "\u019e\001\002\000\004\027\uffff\001\002\000\004\002\u019a" +
    "\001\002\000\010\002\ufff0\033\010\034\014\001\002\000" +
    "\016\023\uff1d\037\024\040\032\041\031\042\026\043\033" +
    "\001\002\000\010\002\uffec\033\010\034\014\001\002\000" +
    "\010\002\uff21\033\uff21\034\uff21\001\002\000\010\002\uffec" +
    "\033\010\034\014\001\002\000\006\023\uff17\044\021\001" +
    "\002\000\004\002\000\001\002\000\004\002\ufff1\001\002" +
    "\000\010\002\uff1b\033\uff1b\034\uff1b\001\002\000\004\023" +
    "\022\001\002\000\004\023\022\001\002\000\014\037\024" +
    "\040\032\041\031\042\026\043\033\001\002\000\010\002" +
    "\uff18\033\uff18\034\uff18\001\002\000\004\044\uff4d\001\002" +
    "\000\004\044\u016e\001\002\000\004\044\uff49\001\002\000" +
    "\004\024\uff48\001\002\000\004\024\034\001\002\000\004" +
    "\044\uff4a\001\002\000\004\044\uff4b\001\002\000\004\044" +
    "\uff4c\001\002\000\004\036\036\001\002\000\010\002\uff19" +
    "\033\uff19\034\uff19\001\002\000\032\003\063\006\071\015" +
    "\074\022\041\030\100\031\061\037\070\040\104\041\101" +
    "\042\040\043\103\044\072\001\002\000\034\003\063\006" +
    "\071\015\074\022\041\026\uff7a\030\100\031\061\037\070" +
    "\040\104\041\101\042\040\043\103\044\072\001\002\000" +
    "\004\044\110\001\002\000\006\003\u0158\023\u0157\001\002" +
    "\000\036\003\uffb5\006\uffb5\015\uffb5\022\uffb5\026\uffb5\030" +
    "\uffb5\031\uffb5\035\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5" +
    "\043\uffb5\044\uffb5\001\002\000\036\003\uff9d\006\uff9d\015" +
    "\uff9d\022\uff9d\026\uff9d\030\uff9d\031\uff9d\035\uff9d\037\uff9d" +
    "\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\001\002\000" +
    "\004\026\u0156\001\002\000\036\003\uffe3\006\uffe3\015\uffe3" +
    "\022\uffe3\026\uffe3\030\uffe3\031\uffe3\035\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\001\002\000\036" +
    "\003\uffea\006\uffea\015\uffea\022\uffea\026\uffea\030\uffea\031" +
    "\uffea\035\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea" +
    "\044\uffea\001\002\000\036\003\uffe5\006\uffe5\015\uffe5\022" +
    "\uffe5\026\uffe5\030\uffe5\031\uffe5\035\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\042\uffe5\043\uffe5\044\uffe5\001\002\000\034\003" +
    "\063\006\071\015\074\022\041\026\uff7a\030\100\031\061" +
    "\037\070\040\104\041\101\042\040\043\103\044\072\001" +
    "\002\000\036\003\uff67\006\uff67\015\uff67\022\uff67\026\uff67" +
    "\030\uff67\031\uff67\035\uff67\037\uff67\040\uff67\041\uff67\042" +
    "\uff67\043\uff67\044\uff67\001\002\000\034\003\063\006\071" +
    "\015\074\022\041\026\uff7a\030\100\031\061\037\070\040" +
    "\104\041\101\042\040\043\103\044\072\001\002\000\034" +
    "\003\063\006\071\015\074\022\041\026\uff7a\030\100\031" +
    "\061\037\070\040\104\041\101\042\040\043\103\044\072" +
    "\001\002\000\034\003\063\006\071\015\074\022\041\026" +
    "\uff7a\030\100\031\061\037\070\040\104\041\101\042\040" +
    "\043\103\044\072\001\002\000\036\003\uff29\006\uff29\015" +
    "\uff29\022\uff29\026\uff29\030\uff29\031\uff29\035\uff29\037\uff29" +
    "\040\uff29\041\uff29\042\uff29\043\uff29\044\uff29\001\002\000" +
    "\034\003\063\006\071\015\074\022\041\026\uff7a\030\100" +
    "\031\061\037\070\040\104\041\101\042\040\043\103\044" +
    "\072\001\002\000\036\003\uffe2\006\uffe2\015\uffe2\022\uffe2" +
    "\026\uffe2\030\uffe2\031\uffe2\035\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\043\uffe2\044\uffe2\001\002\000\036\003\uffe6" +
    "\006\uffe6\015\uffe6\022\uffe6\026\uffe6\030\uffe6\031\uffe6\035" +
    "\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6" +
    "\001\002\000\014\037\357\040\363\041\362\042\360\043" +
    "\364\001\002\000\036\003\uffe9\006\uffe9\015\uffe9\022\uffe9" +
    "\026\uffe9\030\uffe9\031\uffe9\035\uffe9\037\uffe9\040\uffe9\041" +
    "\uffe9\042\uffe9\043\uffe9\044\uffe9\001\002\000\020\004\uff93" +
    "\005\uff93\044\uff93\055\uff93\056\uff93\057\uff93\060\uff93\001" +
    "\002\000\036\003\uffeb\006\uffeb\015\uffeb\022\uffeb\026\uffeb" +
    "\030\uffeb\031\uffeb\035\uffeb\037\uffeb\040\uffeb\041\uffeb\042" +
    "\uffeb\043\uffeb\044\uffeb\001\002\000\036\003\uff79\006\uff79" +
    "\015\uff79\022\uff79\026\uff79\030\uff79\031\uff79\035\uff79\037" +
    "\uff79\040\uff79\041\uff79\042\uff79\043\uff79\044\uff79\001\002" +
    "\000\036\003\uff53\006\uff53\015\uff53\022\uff53\026\uff53\030" +
    "\uff53\031\uff53\035\uff53\037\uff53\040\uff53\041\uff53\042\uff53" +
    "\043\uff53\044\uff53\001\002\000\034\003\063\006\071\015" +
    "\074\022\041\026\uff7a\030\100\031\061\037\070\040\104" +
    "\041\101\042\040\043\103\044\072\001\002\000\004\044" +
    "\110\001\002\000\006\003\326\023\325\001\002\000\012" +
    "\003\223\007\224\023\222\045\221\001\002\000\036\003" +
    "\uffe4\006\uffe4\015\uffe4\022\uffe4\026\uffe4\030\uffe4\031\uffe4" +
    "\035\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\001\002\000\006\003\156\023\155\001\002\000\034" +
    "\003\063\006\071\015\074\022\041\026\uff7a\030\100\031" +
    "\061\037\070\040\104\041\101\042\040\043\103\044\072" +
    "\001\002\000\036\003\uffe7\006\uffe7\015\uffe7\022\uffe7\026" +
    "\uffe7\030\uffe7\031\uffe7\035\uffe7\037\uffe7\040\uffe7\041\uffe7" +
    "\042\uffe7\043\uffe7\044\uffe7\001\002\000\036\003\uff6d\006" +
    "\uff6d\015\uff6d\022\uff6d\026\uff6d\030\uff6d\031\uff6d\035\uff6d" +
    "\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043\uff6d\044\uff6d\001" +
    "\002\000\006\003\130\023\127\001\002\000\004\044\110" +
    "\001\002\000\036\003\uffe8\006\uffe8\015\uffe8\022\uffe8\026" +
    "\uffe8\030\uffe8\031\uffe8\035\uffe8\037\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\043\uffe8\044\uffe8\001\002\000\004\044\110\001" +
    "\002\000\004\044\110\001\002\000\006\047\uffdb\054\uffdb" +
    "\001\002\000\006\047\121\054\120\001\002\000\006\047" +
    "\uffda\054\uffda\001\002\000\010\007\111\047\uffd9\054\uffd9" +
    "\001\002\000\016\004\117\005\116\055\114\056\115\057" +
    "\112\060\113\001\002\000\006\047\uffd7\054\uffd7\001\002" +
    "\000\006\047\uffd6\054\uffd6\001\002\000\006\047\uffd5\054" +
    "\uffd5\001\002\000\006\047\uffd8\054\uffd8\001\002\000\006" +
    "\047\uffd3\054\uffd3\001\002\000\006\047\uffd4\054\uffd4\001" +
    "\002\000\036\003\uffe0\006\uffe0\015\uffe0\022\uffe0\026\uffe0" +
    "\030\uffe0\031\uffe0\035\uffe0\037\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\043\uffe0\044\uffe0\001\002\000\004\044\110\001\002" +
    "\000\006\047\uffdc\054\uffdc\001\002\000\006\047\121\054" +
    "\124\001\002\000\036\003\uffdd\006\uffdd\015\uffdd\022\uffdd" +
    "\026\uffdd\030\uffdd\031\uffdd\035\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\042\uffdd\043\uffdd\044\uffdd\001\002\000\006\047\121" +
    "\054\126\001\002\000\036\003\uffde\006\uffde\015\uffde\022" +
    "\uffde\026\uffde\030\uffde\031\uffde\035\uffde\037\uffde\040\uffde" +
    "\041\uffde\042\uffde\043\uffde\044\uffde\001\002\000\014\004" +
    "\142\005\141\044\143\056\140\057\135\001\002\000\004" +
    "\023\uff63\001\002\000\036\003\uff64\006\uff64\015\uff64\022" +
    "\uff64\026\uff64\030\uff64\031\uff64\035\uff64\037\uff64\040\uff64" +
    "\041\uff64\042\uff64\043\uff64\044\uff64\001\002\000\004\023" +
    "\127\001\002\000\036\003\uff62\006\uff62\015\uff62\022\uff62" +
    "\026\uff62\030\uff62\031\uff62\035\uff62\037\uff62\040\uff62\041" +
    "\uff62\042\uff62\043\uff62\044\uff62\001\002\000\010\010\uff8f" +
    "\011\uff8f\024\uff8f\001\002\000\012\010\uff89\011\uff89\012" +
    "\uff89\024\uff89\001\002\000\004\024\146\001\002\000\004" +
    "\012\144\001\002\000\012\010\uff8a\011\uff8a\012\uff8a\024" +
    "\uff8a\001\002\000\012\010\uff87\011\uff87\012\uff87\024\uff87" +
    "\001\002\000\012\010\uff88\011\uff88\012\uff88\024\uff88\001" +
    "\002\000\012\010\uff8b\011\uff8b\012\uff8b\024\uff8b\001\002" +
    "\000\014\004\142\005\141\044\143\056\140\057\135\001" +
    "\002\000\010\010\uff8e\011\uff8e\024\uff8e\001\002\000\004" +
    "\036\150\001\002\000\036\003\uff65\006\uff65\015\uff65\022" +
    "\uff65\026\uff65\030\uff65\031\uff65\035\uff65\037\uff65\040\uff65" +
    "\041\uff65\042\uff65\043\uff65\044\uff65\001\002\000\032\003" +
    "\063\006\071\015\074\022\041\030\100\031\061\037\070" +
    "\040\104\041\101\042\040\043\103\044\072\001\002\000" +
    "\004\026\152\001\002\000\036\003\uff66\006\uff66\015\uff66" +
    "\022\uff66\026\uff66\030\uff66\031\uff66\035\uff66\037\uff66\040" +
    "\uff66\041\uff66\042\uff66\043\uff66\044\uff66\001\002\000\004" +
    "\026\uff7b\001\002\000\004\026\uff7f\001\002\000\004\044" +
    "\162\001\002\000\004\023\uff4f\001\002\000\036\003\uff50" +
    "\006\uff50\015\uff50\022\uff50\026\uff50\030\uff50\031\uff50\035" +
    "\uff50\037\uff50\040\uff50\041\uff50\042\uff50\043\uff50\044\uff50" +
    "\001\002\000\004\023\155\001\002\000\036\003\uff4e\006" +
    "\uff4e\015\uff4e\022\uff4e\026\uff4e\030\uff4e\031\uff4e\035\uff4e" +
    "\037\uff4e\040\uff4e\041\uff4e\042\uff4e\043\uff4e\044\uff4e\001" +
    "\002\000\004\024\163\001\002\000\004\036\165\001\002" +
    "\000\036\003\uff51\006\uff51\015\uff51\022\uff51\026\uff51\030" +
    "\uff51\031\uff51\035\uff51\037\uff51\040\uff51\041\uff51\042\uff51" +
    "\043\uff51\044\uff51\001\002\000\004\016\167\001\002\000" +
    "\006\016\uff5f\021\uff5f\001\002\000\006\003\206\023\205" +
    "\001\002\000\006\016\167\021\uff57\001\002\000\004\021" +
    "\172\001\002\000\004\036\177\001\002\000\004\026\175" +
    "\001\002\000\004\026\uff56\001\002\000\036\003\uff52\006" +
    "\uff52\015\uff52\022\uff52\026\uff52\030\uff52\031\uff52\035\uff52" +
    "\037\uff52\040\uff52\041\uff52\042\uff52\043\uff52\044\uff52\001" +
    "\002\000\004\026\uff54\001\002\000\032\003\063\006\071" +
    "\015\074\022\041\030\100\031\061\037\070\040\104\041" +
    "\101\042\040\043\103\044\072\001\002\000\004\026\201" +
    "\001\002\000\004\026\uff55\001\002\000\004\021\uff59\001" +
    "\002\000\004\021\uff58\001\002\000\006\016\uff5c\021\uff5c" +
    "\001\002\000\006\056\212\060\211\001\002\000\004\023" +
    "\uff5b\001\002\000\004\023\205\001\002\000\006\016\uff5a" +
    "\021\uff5a\001\002\000\004\024\uff60\001\002\000\004\024" +
    "\uff61\001\002\000\004\024\214\001\002\000\004\036\216" +
    "\001\002\000\006\016\uff5d\021\uff5d\001\002\000\032\003" +
    "\063\006\071\015\074\022\041\030\100\031\061\037\070" +
    "\040\104\041\101\042\040\043\103\044\072\001\002\000" +
    "\004\026\220\001\002\000\006\016\uff5e\021\uff5e\001\002" +
    "\000\024\003\305\004\304\005\274\044\301\046\307\055" +
    "\275\056\276\057\302\060\277\001\002\000\006\044\267" +
    "\056\266\001\002\000\022\004\uff91\005\uff91\044\uff91\054" +
    "\uff25\055\uff91\056\uff91\057\uff91\060\uff91\001\002\000\020" +
    "\004\233\005\232\044\234\055\230\056\231\057\225\060" +
    "\227\001\002\000\004\054\243\001\002\000\036\003\uff95" +
    "\006\uff95\015\uff95\022\uff95\026\uff95\030\uff95\031\uff95\035" +
    "\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95" +
    "\001\002\000\004\054\242\001\002\000\004\054\241\001" +
    "\002\000\004\054\240\001\002\000\004\054\237\001\002" +
    "\000\004\054\236\001\002\000\004\054\235\001\002\000" +
    "\036\003\uff9c\006\uff9c\015\uff9c\022\uff9c\026\uff9c\030\uff9c" +
    "\031\uff9c\035\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043" +
    "\uff9c\044\uff9c\001\002\000\036\003\uff98\006\uff98\015\uff98" +
    "\022\uff98\026\uff98\030\uff98\031\uff98\035\uff98\037\uff98\040" +
    "\uff98\041\uff98\042\uff98\043\uff98\044\uff98\001\002\000\036" +
    "\003\uff97\006\uff97\015\uff97\022\uff97\026\uff97\030\uff97\031" +
    "\uff97\035\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97" +
    "\044\uff97\001\002\000\036\003\uff9b\006\uff9b\015\uff9b\022" +
    "\uff9b\026\uff9b\030\uff9b\031\uff9b\035\uff9b\037\uff9b\040\uff9b" +
    "\041\uff9b\042\uff9b\043\uff9b\044\uff9b\001\002\000\036\003" +
    "\uff96\006\uff96\015\uff96\022\uff96\026\uff96\030\uff96\031\uff96" +
    "\035\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044" +
    "\uff96\001\002\000\036\003\uff99\006\uff99\015\uff99\022\uff99" +
    "\026\uff99\030\uff99\031\uff99\035\uff99\037\uff99\040\uff99\041" +
    "\uff99\042\uff99\043\uff99\044\uff99\001\002\000\036\003\uff9a" +
    "\006\uff9a\015\uff9a\022\uff9a\026\uff9a\030\uff9a\031\uff9a\035" +
    "\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a" +
    "\001\002\000\020\004\255\005\254\044\256\055\251\056" +
    "\252\057\247\060\250\001\002\000\004\054\246\001\002" +
    "\000\036\003\uff24\006\uff24\015\uff24\022\uff24\026\uff24\030" +
    "\uff24\031\uff24\035\uff24\037\uff24\040\uff24\041\uff24\042\uff24" +
    "\043\uff24\044\uff24\001\002\000\004\054\265\001\002\000" +
    "\004\054\264\001\002\000\004\054\263\001\002\000\004" +
    "\054\262\001\002\000\036\003\uff90\006\uff90\015\uff90\022" +
    "\uff90\026\uff90\030\uff90\031\uff90\035\uff90\037\uff90\040\uff90" +
    "\041\uff90\042\uff90\043\uff90\044\uff90\001\002\000\004\054" +
    "\261\001\002\000\004\054\260\001\002\000\004\054\257" +
    "\001\002\000\036\003\uff9f\006\uff9f\015\uff9f\022\uff9f\026" +
    "\uff9f\030\uff9f\031\uff9f\035\uff9f\037\uff9f\040\uff9f\041\uff9f" +
    "\042\uff9f\043\uff9f\044\uff9f\001\002\000\036\003\uffa3\006" +
    "\uffa3\015\uffa3\022\uffa3\026\uffa3\030\uffa3\031\uffa3\035\uffa3" +
    "\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\001" +
    "\002\000\036\003\uffa0\006\uffa0\015\uffa0\022\uffa0\026\uffa0" +
    "\030\uffa0\031\uffa0\035\uffa0\037\uffa0\040\uffa0\041\uffa0\042" +
    "\uffa0\043\uffa0\044\uffa0\001\002\000\036\003\uffa4\006\uffa4" +
    "\015\uffa4\022\uffa4\026\uffa4\030\uffa4\031\uffa4\035\uffa4\037" +
    "\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\001\002" +
    "\000\036\003\uffa1\006\uffa1\015\uffa1\022\uffa1\026\uffa1\030" +
    "\uffa1\031\uffa1\035\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1" +
    "\043\uffa1\044\uffa1\001\002\000\036\003\uffa2\006\uffa2\015" +
    "\uffa2\022\uffa2\026\uffa2\030\uffa2\031\uffa2\035\uffa2\037\uffa2" +
    "\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\001\002\000" +
    "\036\003\uff9e\006\uff9e\015\uff9e\022\uff9e\026\uff9e\030\uff9e" +
    "\031\uff9e\035\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043" +
    "\uff9e\044\uff9e\001\002\000\004\024\uffb7\001\002\000\004" +
    "\024\uffb6\001\002\000\004\024\271\001\002\000\004\007" +
    "\272\001\002\000\020\004\255\005\254\044\256\055\251" +
    "\056\252\057\247\060\250\001\002\000\036\003\uff94\006" +
    "\uff94\015\uff94\022\uff94\026\uff94\030\uff94\031\uff94\035\uff94" +
    "\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94\001" +
    "\002\000\006\046\uff33\047\uff33\001\002\000\006\046\uff32" +
    "\047\uff32\001\002\000\006\046\uff30\047\uff30\001\002\000" +
    "\006\046\uff35\047\uff35\001\002\000\004\046\uff2f\001\002" +
    "\000\006\046\uff36\047\uff36\001\002\000\006\046\uff31\047" +
    "\uff31\001\002\000\004\046\uff28\001\002\000\006\046\uff34" +
    "\047\uff34\001\002\000\020\004\uff23\005\uff23\044\uff23\055" +
    "\uff23\056\uff23\057\uff23\060\uff23\001\002\000\004\046\317" +
    "\001\002\000\004\054\316\001\002\000\006\046\uff2a\047" +
    "\311\001\002\000\020\004\304\005\274\044\301\055\275" +
    "\056\276\057\302\060\277\001\002\000\004\046\uff2b\001" +
    "\002\000\004\046\uff2c\001\002\000\006\046\uff2d\047\311" +
    "\001\002\000\004\046\uff2e\001\002\000\036\003\uff27\006" +
    "\uff27\015\uff27\022\uff27\026\uff27\030\uff27\031\uff27\035\uff27" +
    "\037\uff27\040\uff27\041\uff27\042\uff27\043\uff27\044\uff27\001" +
    "\002\000\004\054\320\001\002\000\036\003\uff26\006\uff26" +
    "\015\uff26\022\uff26\026\uff26\030\uff26\031\uff26\035\uff26\037" +
    "\uff26\040\uff26\041\uff26\042\uff26\043\uff26\044\uff26\001\002" +
    "\000\020\004\304\005\274\044\301\055\275\056\276\057" +
    "\302\060\277\001\002\000\004\046\323\001\002\000\004" +
    "\054\324\001\002\000\036\003\uff22\006\uff22\015\uff22\022" +
    "\uff22\026\uff22\030\uff22\031\uff22\035\uff22\037\uff22\040\uff22" +
    "\041\uff22\042\uff22\043\uff22\044\uff22\001\002\000\014\004" +
    "\142\005\141\044\143\056\140\057\135\001\002\000\004" +
    "\023\uff74\001\002\000\036\003\uff75\006\uff75\015\uff75\022" +
    "\uff75\026\uff75\030\uff75\031\uff75\035\uff75\037\uff75\040\uff75" +
    "\041\uff75\042\uff75\043\uff75\044\uff75\001\002\000\004\023" +
    "\325\001\002\000\036\003\uff73\006\uff73\015\uff73\022\uff73" +
    "\026\uff73\030\uff73\031\uff73\035\uff73\037\uff73\040\uff73\041" +
    "\uff73\042\uff73\043\uff73\044\uff73\001\002\000\010\010\350" +
    "\011\347\024\uff84\001\002\000\004\024\uff86\001\002\000" +
    "\004\024\335\001\002\000\004\036\337\001\002\000\036" +
    "\003\uff76\006\uff76\015\uff76\022\uff76\026\uff76\030\uff76\031" +
    "\uff76\035\uff76\037\uff76\040\uff76\041\uff76\042\uff76\043\uff76" +
    "\044\uff76\001\002\000\032\003\063\006\071\015\074\022" +
    "\041\030\100\031\061\037\070\040\104\041\101\042\040" +
    "\043\103\044\072\001\002\000\004\026\341\001\002\000" +
    "\040\003\uff78\006\uff78\014\342\015\uff78\022\uff78\026\uff78" +
    "\030\uff78\031\uff78\035\uff78\037\uff78\040\uff78\041\uff78\042" +
    "\uff78\043\uff78\044\uff78\001\002\000\004\036\343\001\002" +
    "\000\032\003\063\006\071\015\074\022\041\030\100\031" +
    "\061\037\070\040\104\041\101\042\040\043\103\044\072" +
    "\001\002\000\004\026\345\001\002\000\036\003\uff77\006" +
    "\uff77\015\uff77\022\uff77\026\uff77\030\uff77\031\uff77\035\uff77" +
    "\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77\044\uff77\001" +
    "\002\000\014\004\142\005\141\044\143\056\140\057\135" +
    "\001\002\000\014\004\uff8d\005\uff8d\044\uff8d\056\uff8d\057" +
    "\uff8d\001\002\000\014\004\uff8c\005\uff8c\044\uff8c\056\uff8c" +
    "\057\uff8c\001\002\000\004\024\uff85\001\002\000\006\047" +
    "\121\054\353\001\002\000\036\003\uffe1\006\uffe1\015\uffe1" +
    "\022\uffe1\026\uffe1\030\uffe1\031\uffe1\035\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\001\002\000\004" +
    "\026\uff80\001\002\000\020\004\233\005\232\044\234\055" +
    "\230\056\231\057\225\060\227\001\002\000\036\003\uff92" +
    "\006\uff92\015\uff92\022\uff92\026\uff92\030\uff92\031\uff92\035" +
    "\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92" +
    "\001\002\000\004\044\u013f\001\002\000\004\044\u012d\001" +
    "\002\000\036\003\uffa5\006\uffa5\015\uffa5\022\uffa5\026\uffa5" +
    "\030\uffa5\031\uffa5\035\uffa5\037\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\001\002\000\004\044\u011b\001\002" +
    "\000\004\044\u0109\001\002\000\004\044\365\001\002\000" +
    "\006\023\366\032\370\001\002\000\006\044\267\056\266" +
    "\001\002\000\036\003\uffaa\006\uffaa\015\uffaa\022\uffaa\026" +
    "\uffaa\030\uffaa\031\uffaa\035\uffaa\037\uffaa\040\uffaa\041\uffaa" +
    "\042\uffaa\043\uffaa\044\uffaa\001\002\000\004\023\371\001" +
    "\002\000\006\004\376\005\375\001\002\000\004\024\uffd2" +
    "\001\002\000\004\024\u0104\001\002\000\004\047\377\001" +
    "\002\000\006\024\uffb8\047\uffb8\001\002\000\006\024\uffb9" +
    "\047\uffb9\001\002\000\006\004\376\005\375\001\002\000" +
    "\004\024\uffce\001\002\000\004\024\uffcf\001\002\000\006" +
    "\024\uffd0\047\377\001\002\000\004\024\uffd1\001\002\000" +
    "\004\054\u0105\001\002\000\036\003\uffb3\006\uffb3\015\uffb3" +
    "\022\uffb3\026\uffb3\030\uffb3\031\uffb3\035\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\001\002\000\004" +
    "\024\u0107\001\002\000\004\054\u0108\001\002\000\036\003" +
    "\uffb4\006\uffb4\015\uffb4\022\uffb4\026\uffb4\030\uffb4\031\uffb4" +
    "\035\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044" +
    "\uffb4\001\002\000\006\023\u010a\032\u010b\001\002\000\006" +
    "\044\267\056\266\001\002\000\004\023\u010d\001\002\000" +
    "\036\003\uffa8\006\uffa8\015\uffa8\022\uffa8\026\uffa8\030\uffa8" +
    "\031\uffa8\035\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043" +
    "\uffa8\044\uffa8\001\002\000\004\057\u010e\001\002\000\004" +
    "\047\u0114\001\002\000\004\024\u0111\001\002\000\004\024" +
    "\uffc8\001\002\000\004\054\u0112\001\002\000\036\003\uffaf" +
    "\006\uffaf\015\uffaf\022\uffaf\026\uffaf\030\uffaf\031\uffaf\035" +
    "\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf" +
    "\001\002\000\004\024\uffc4\001\002\000\004\057\u0115\001" +
    "\002\000\006\024\uffc6\047\u0114\001\002\000\004\024\uffc5" +
    "\001\002\000\004\024\uffc7\001\002\000\004\024\u0119\001" +
    "\002\000\004\054\u011a\001\002\000\036\003\uffb0\006\uffb0" +
    "\015\uffb0\022\uffb0\026\uffb0\030\uffb0\031\uffb0\035\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\001\002" +
    "\000\006\023\u011c\032\u011e\001\002\000\006\044\267\056" +
    "\266\001\002\000\036\003\uffa6\006\uffa6\015\uffa6\022\uffa6" +
    "\026\uffa6\030\uffa6\031\uffa6\035\uffa6\037\uffa6\040\uffa6\041" +
    "\uffa6\042\uffa6\043\uffa6\044\uffa6\001\002\000\004\023\u011f" +
    "\001\002\000\004\055\u0122\001\002\000\004\024\u0128\001" +
    "\002\000\004\024\uffc3\001\002\000\004\047\u0123\001\002" +
    "\000\004\055\u0125\001\002\000\004\024\uffbf\001\002\000" +
    "\006\024\uffc1\047\u0123\001\002\000\004\024\uffc0\001\002" +
    "\000\004\024\uffc2\001\002\000\004\054\u0129\001\002\000" +
    "\036\003\uffab\006\uffab\015\uffab\022\uffab\026\uffab\030\uffab" +
    "\031\uffab\035\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043" +
    "\uffab\044\uffab\001\002\000\004\024\u012b\001\002\000\004" +
    "\054\u012c\001\002\000\036\003\uffac\006\uffac\015\uffac\022" +
    "\uffac\026\uffac\030\uffac\031\uffac\035\uffac\037\uffac\040\uffac" +
    "\041\uffac\042\uffac\043\uffac\044\uffac\001\002\000\006\023" +
    "\u012e\032\u012f\001\002\000\006\044\267\056\266\001\002" +
    "\000\004\023\u0131\001\002\000\036\003\uffa7\006\uffa7\015" +
    "\uffa7\022\uffa7\026\uffa7\030\uffa7\031\uffa7\035\uffa7\037\uffa7" +
    "\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\001\002\000" +
    "\004\060\u0133\001\002\000\004\024\u013a\001\002\000\004" +
    "\047\u0136\001\002\000\004\024\uffbe\001\002\000\004\024" +
    "\uffba\001\002\000\004\060\u0138\001\002\000\004\024\uffbb" +
    "\001\002\000\006\024\uffbc\047\u0136\001\002\000\004\024" +
    "\uffbd\001\002\000\004\054\u013b\001\002\000\036\003\uffad" +
    "\006\uffad\015\uffad\022\uffad\026\uffad\030\uffad\031\uffad\035" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\001\002\000\004\024\u013d\001\002\000\004\054\u013e\001" +
    "\002\000\036\003\uffae\006\uffae\015\uffae\022\uffae\026\uffae" +
    "\030\uffae\031\uffae\035\uffae\037\uffae\040\uffae\041\uffae\042" +
    "\uffae\043\uffae\044\uffae\001\002\000\006\023\u0140\032\u0141" +
    "\001\002\000\006\044\267\056\266\001\002\000\004\023" +
    "\u0143\001\002\000\036\003\uffa9\006\uffa9\015\uffa9\022\uffa9" +
    "\026\uffa9\030\uffa9\031\uffa9\035\uffa9\037\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\001\002\000\004\056\u0145" +
    "\001\002\000\004\024\u014c\001\002\000\004\047\u0148\001" +
    "\002\000\004\024\uffcd\001\002\000\004\024\uffc9\001\002" +
    "\000\004\056\u014a\001\002\000\004\024\uffca\001\002\000" +
    "\006\024\uffcb\047\u0148\001\002\000\004\024\uffcc\001\002" +
    "\000\004\054\u014d\001\002\000\036\003\uffb1\006\uffb1\015" +
    "\uffb1\022\uffb1\026\uffb1\030\uffb1\031\uffb1\035\uffb1\037\uffb1" +
    "\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\001\002\000" +
    "\004\024\u014f\001\002\000\004\054\u0150\001\002\000\036" +
    "\003\uffb2\006\uffb2\015\uffb2\022\uffb2\026\uffb2\030\uffb2\031" +
    "\uffb2\035\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\001\002\000\004\026\uff7c\001\002\000\004\026" +
    "\uff83\001\002\000\004\026\uff7e\001\002\000\004\026\uff82" +
    "\001\002\000\004\026\uff81\001\002\000\010\002\uff1a\033" +
    "\uff1a\034\uff1a\001\002\000\010\044\u0161\056\u0160\057\u015c" +
    "\001\002\000\004\023\uff69\001\002\000\036\003\uff6a\006" +
    "\uff6a\015\uff6a\022\uff6a\026\uff6a\030\uff6a\031\uff6a\035\uff6a" +
    "\037\uff6a\040\uff6a\041\uff6a\042\uff6a\043\uff6a\044\uff6a\001" +
    "\002\000\004\023\u0157\001\002\000\036\003\uff68\006\uff68" +
    "\015\uff68\022\uff68\026\uff68\030\uff68\031\uff68\035\uff68\037" +
    "\uff68\040\uff68\041\uff68\042\uff68\043\uff68\044\uff68\001\002" +
    "\000\006\025\uff70\054\uff70\001\002\000\004\024\u0166\001" +
    "\002\000\004\024\uff72\001\002\000\004\025\u0162\001\002" +
    "\000\006\025\uff6f\054\uff6f\001\002\000\006\025\uff6e\054" +
    "\uff6e\001\002\000\010\044\u0161\056\u0160\057\u015c\001\002" +
    "\000\004\054\u0164\001\002\000\004\044\u0165\001\002\000" +
    "\004\024\uff71\001\002\000\004\036\u0168\001\002\000\036" +
    "\003\uff6b\006\uff6b\015\uff6b\022\uff6b\026\uff6b\030\uff6b\031" +
    "\uff6b\035\uff6b\037\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b" +
    "\044\uff6b\001\002\000\032\003\063\006\071\015\074\022" +
    "\041\030\100\031\061\037\070\040\104\041\101\042\040" +
    "\043\103\044\072\001\002\000\004\026\u016a\001\002\000" +
    "\036\003\uff6c\006\uff6c\015\uff6c\022\uff6c\026\uff6c\030\uff6c" +
    "\031\uff6c\035\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043" +
    "\uff6c\044\uff6c\001\002\000\006\047\121\054\u016c\001\002" +
    "\000\036\003\uffdf\006\uffdf\015\uffdf\022\uffdf\026\uffdf\030" +
    "\uffdf\031\uffdf\035\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf" +
    "\043\uffdf\044\uffdf\001\002\000\004\026\uff7d\001\002\000" +
    "\006\024\uff43\047\u016f\001\002\000\014\037\024\040\032" +
    "\041\031\042\026\043\033\001\002\000\004\024\uff44\001" +
    "\002\000\004\044\u0173\001\002\000\004\024\uff45\001\002" +
    "\000\006\024\uff46\047\u016f\001\002\000\004\024\uff47\001" +
    "\002\000\010\002\uff16\033\uff16\034\uff16\001\002\000\004" +
    "\002\uffef\001\002\000\004\002\uffed\001\002\000\004\002" +
    "\uffee\001\002\000\004\044\u0198\001\002\000\004\023\u017b" +
    "\001\002\000\014\037\024\040\032\041\031\042\026\043" +
    "\033\001\002\000\010\002\uff1c\033\uff1c\034\uff1c\001\002" +
    "\000\004\024\u017e\001\002\000\004\036\u0180\001\002\000" +
    "\010\002\uff1f\033\uff1f\034\uff1f\001\002\000\034\003\063" +
    "\006\071\015\074\022\041\030\100\031\061\035\u0189\037" +
    "\070\040\104\041\101\042\040\043\103\044\072\001\002" +
    "\000\036\003\063\006\071\015\074\022\041\026\uff38\030" +
    "\100\031\061\035\u0189\037\070\040\104\041\101\042\040" +
    "\043\103\044\072\001\002\000\036\003\063\006\071\015" +
    "\074\022\041\026\uff38\030\100\031\061\035\u0189\037\070" +
    "\040\104\041\101\042\040\043\103\044\072\001\002\000" +
    "\036\003\063\006\071\015\074\022\041\026\uff38\030\100" +
    "\031\061\035\u0189\037\070\040\104\041\101\042\040\043" +
    "\103\044\072\001\002\000\036\003\063\006\071\015\074" +
    "\022\041\026\uff38\030\100\031\061\035\u0189\037\070\040" +
    "\104\041\101\042\040\043\103\044\072\001\002\000\036" +
    "\003\063\006\071\015\074\022\041\026\uff38\030\100\031" +
    "\061\035\u0189\037\070\040\104\041\101\042\040\043\103" +
    "\044\072\001\002\000\036\003\063\006\071\015\074\022" +
    "\041\026\uff38\030\100\031\061\035\u0189\037\070\040\104" +
    "\041\101\042\040\043\103\044\072\001\002\000\036\003" +
    "\063\006\071\015\074\022\041\026\uff38\030\100\031\061" +
    "\035\u0189\037\070\040\104\041\101\042\040\043\103\044" +
    "\072\001\002\000\036\003\063\006\071\015\074\022\041" +
    "\026\uff38\030\100\031\061\035\u0189\037\070\040\104\041" +
    "\101\042\040\043\103\044\072\001\002\000\020\004\233" +
    "\005\232\044\234\055\230\056\231\057\225\060\227\001" +
    "\002\000\036\003\063\006\071\015\074\022\041\026\uff38" +
    "\030\100\031\061\035\u0189\037\070\040\104\041\101\042" +
    "\040\043\103\044\072\001\002\000\004\026\u018c\001\002" +
    "\000\010\002\uff20\033\uff20\034\uff20\001\002\000\004\026" +
    "\uff3e\001\002\000\004\026\uff39\001\002\000\036\003\uff37" +
    "\006\uff37\015\uff37\022\uff37\026\uff37\030\uff37\031\uff37\035" +
    "\uff37\037\uff37\040\uff37\041\uff37\042\uff37\043\uff37\044\uff37" +
    "\001\002\000\004\026\uff3b\001\002\000\004\026\uff3f\001" +
    "\002\000\004\026\uff3a\001\002\000\004\026\uff42\001\002" +
    "\000\004\026\uff3d\001\002\000\004\026\uff41\001\002\000" +
    "\004\026\uff40\001\002\000\004\026\uff3c\001\002\000\004" +
    "\023\u017b\001\002\000\010\002\uff1e\033\uff1e\034\uff1e\001" +
    "\002\000\004\002\001\001\002\000\004\027\004\001\002" +
    "\000\010\002\ufff0\033\010\034\014\001\002\000\004\002" +
    "\ufffe\001\002\000\004\024\u019f\001\002\000\004\036\u01a0" +
    "\001\002\000\032\003\ufffd\006\ufffd\015\ufffd\022\ufffd\030" +
    "\ufffd\031\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd" +
    "\044\ufffd\001\002\000\032\003\063\006\071\015\074\022" +
    "\041\030\100\031\061\037\070\040\104\041\101\042\040" +
    "\043\103\044\072\001\002\000\034\003\063\006\071\015" +
    "\074\022\041\026\ufff2\030\100\031\061\037\070\040\104" +
    "\041\101\042\040\043\103\044\072\001\002\000\004\026" +
    "\u01b3\001\002\000\034\003\063\006\071\015\074\022\041" +
    "\026\ufff2\030\100\031\061\037\070\040\104\041\101\042" +
    "\040\043\103\044\072\001\002\000\034\003\063\006\071" +
    "\015\074\022\041\026\ufff2\030\100\031\061\037\070\040" +
    "\104\041\101\042\040\043\103\044\072\001\002\000\034" +
    "\003\063\006\071\015\074\022\041\026\ufff2\030\100\031" +
    "\061\037\070\040\104\041\101\042\040\043\103\044\072" +
    "\001\002\000\034\003\063\006\071\015\074\022\041\026" +
    "\ufff2\030\100\031\061\037\070\040\104\041\101\042\040" +
    "\043\103\044\072\001\002\000\034\003\063\006\071\015" +
    "\074\022\041\026\ufff2\030\100\031\061\037\070\040\104" +
    "\041\101\042\040\043\103\044\072\001\002\000\034\003" +
    "\063\006\071\015\074\022\041\026\ufff2\030\100\031\061" +
    "\037\070\040\104\041\101\042\040\043\103\044\072\001" +
    "\002\000\034\003\063\006\071\015\074\022\041\026\ufff2" +
    "\030\100\031\061\037\070\040\104\041\101\042\040\043" +
    "\103\044\072\001\002\000\004\026\ufff3\001\002\000\004" +
    "\026\ufff7\001\002\000\004\026\ufff8\001\002\000\004\026" +
    "\ufff4\001\002\000\004\026\ufff9\001\002\000\004\026\ufff6" +
    "\001\002\000\004\026\ufffb\001\002\000\004\026\ufffa\001" +
    "\002\000\010\002\ufffc\033\ufffc\034\ufffc\001\002\000\004" +
    "\026\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01b2\000\006\117\006\214\005\001\001\000\002\001" +
    "\001\000\004\221\u019a\001\001\000\002\001\001\000\016" +
    "\161\015\163\014\164\012\166\011\173\010\175\016\001" +
    "\001\000\006\203\u0178\234\u0179\001\001\000\016\161\u0176" +
    "\162\u0177\164\012\166\011\173\010\175\016\001\001\000" +
    "\002\001\001\000\016\161\u0176\162\u0175\164\012\166\011" +
    "\173\010\175\016\001\001\000\004\235\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\174\u0174\001\001\000\004\174\022\001\001\000\010\177" +
    "\027\202\026\203\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\176\034\001\001\000\002\001" +
    "\001\000\066\002\051\003\063\004\057\011\101\012\072" +
    "\017\061\020\044\025\045\026\046\033\075\034\056\042" +
    "\047\044\042\062\053\064\064\066\043\070\066\072\076" +
    "\074\074\077\050\101\052\103\065\122\036\124\041\204" +
    "\055\206\054\001\001\000\070\002\051\003\063\004\057" +
    "\011\101\012\072\017\061\020\044\025\045\026\046\033" +
    "\075\034\056\042\047\044\042\062\053\064\064\066\152" +
    "\067\u016c\070\066\072\076\074\074\077\050\101\052\103" +
    "\065\122\036\124\041\204\055\206\054\001\001\000\010" +
    "\215\104\216\u016a\217\106\001\001\000\004\071\u0158\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\002\051\003\063\004\057\011\101\012\072\017\061" +
    "\020\044\025\045\026\046\033\075\034\056\042\047\044" +
    "\042\062\053\064\064\066\152\067\u0154\070\066\072\076" +
    "\074\074\077\050\101\052\103\065\122\036\124\041\204" +
    "\055\206\054\001\001\000\002\001\001\000\070\002\051" +
    "\003\063\004\057\011\101\012\072\017\061\020\044\025" +
    "\045\026\046\033\075\034\056\042\047\044\042\062\053" +
    "\064\064\066\152\067\u0153\070\066\072\076\074\074\077" +
    "\050\101\052\103\065\122\036\124\041\204\055\206\054" +
    "\001\001\000\070\002\051\003\063\004\057\011\101\012" +
    "\072\017\061\020\044\025\045\026\046\033\075\034\056" +
    "\042\047\044\042\062\053\064\064\066\152\067\u0152\070" +
    "\066\072\076\074\074\077\050\101\052\103\065\122\036" +
    "\124\041\204\055\206\054\001\001\000\070\002\051\003" +
    "\063\004\057\011\101\012\072\017\061\020\044\025\045" +
    "\026\046\033\075\034\056\042\047\044\042\062\053\064" +
    "\064\066\152\067\u0151\070\066\072\076\074\074\077\050" +
    "\101\052\103\065\122\036\124\041\204\055\206\054\001" +
    "\001\000\002\001\001\000\070\002\051\003\063\004\057" +
    "\011\101\012\072\017\061\020\044\025\045\026\046\033" +
    "\075\034\056\042\047\044\042\062\053\064\064\066\152" +
    "\067\u0150\070\066\072\076\074\074\077\050\101\052\103" +
    "\065\122\036\124\041\204\055\206\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\123\360\001\001\000" +
    "\002\001\001\000\004\223\354\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\070\002\051\003" +
    "\063\004\057\011\101\012\072\017\061\020\044\025\045" +
    "\026\046\033\075\034\056\042\047\044\042\062\053\064" +
    "\064\066\152\067\353\070\066\072\076\074\074\077\050" +
    "\101\052\103\065\122\036\124\041\204\055\206\054\001" +
    "\001\000\010\215\104\216\351\217\106\001\001\000\004" +
    "\063\326\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\102\156\001\001\000\070\002\051\003\063\004\057" +
    "\011\101\012\072\017\061\020\044\025\045\026\046\033" +
    "\075\034\056\042\047\044\042\062\053\064\064\066\152" +
    "\067\153\070\066\072\076\074\074\077\050\101\052\103" +
    "\065\122\036\124\041\204\055\206\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\076\130\001\001\000" +
    "\010\215\104\216\124\217\106\001\001\000\002\001\001" +
    "\000\010\215\104\216\122\217\106\001\001\000\010\215" +
    "\104\216\105\217\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\215\121\217\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\051\135\052\133\053\136" +
    "\001\001\000\004\227\131\001\001\000\002\001\001\000" +
    "\004\076\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\144\001\001\000\002\001\001\000" +
    "\004\100\146\001\001\000\002\001\001\000\066\002\051" +
    "\003\063\004\057\011\101\012\072\017\061\020\044\025" +
    "\045\026\046\033\075\034\056\042\047\044\042\062\053" +
    "\064\064\066\150\070\066\072\076\074\074\077\050\101" +
    "\052\103\065\122\036\124\041\204\055\206\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\231\157\001\001" +
    "\000\002\001\001\000\004\102\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\104\163\001\001\000\002" +
    "\001\001\000\010\105\167\107\165\115\170\001\001\000" +
    "\002\001\001\000\004\106\203\001\001\000\012\105\167" +
    "\107\165\115\202\116\201\001\001\000\006\112\172\113" +
    "\173\001\001\000\004\114\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\066\002\051\003\063\004\057\011\101\012\072\017\061" +
    "\020\044\025\045\026\046\033\075\034\056\042\047\044" +
    "\042\062\053\064\064\066\177\070\066\072\076\074\074" +
    "\077\050\101\052\103\065\122\036\124\041\204\055\206" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\110" +
    "\212\001\001\000\004\230\206\001\001\000\004\106\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\111\214\001\001\000\002" +
    "\001\001\000\066\002\051\003\063\004\057\011\101\012" +
    "\072\017\061\020\044\025\045\026\046\033\075\034\056" +
    "\042\047\044\042\062\053\064\064\066\216\070\066\072" +
    "\076\074\074\077\050\101\052\103\065\122\036\124\041" +
    "\204\055\206\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\205\305\207\302\212\277\213\307\001\001" +
    "\000\004\157\267\001\001\000\006\224\243\232\244\001" +
    "\001\000\004\043\225\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\160\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\160\272\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\233\320\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\211\311" +
    "\001\001\000\006\210\312\213\313\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\211\314\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\205\321\207\302\212\277\213\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\051\331\052\133\053\136\060\333\061\332\001\001" +
    "\000\004\225\327\001\001\000\002\001\001\000\004\063" +
    "\330\001\001\000\002\001\001\000\004\054\345\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\065\335\001" +
    "\001\000\002\001\001\000\066\002\051\003\063\004\057" +
    "\011\101\012\072\017\061\020\044\025\045\026\046\033" +
    "\075\034\056\042\047\044\042\062\053\064\064\066\337" +
    "\070\066\072\076\074\074\077\050\101\052\103\065\122" +
    "\036\124\041\204\055\206\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\002\051\003" +
    "\063\004\057\011\101\012\072\017\061\020\044\025\045" +
    "\026\046\033\075\034\056\042\047\044\042\062\053\064" +
    "\064\066\343\070\066\072\076\074\074\077\050\101\052" +
    "\103\065\122\036\124\041\204\055\206\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\051\331\052\133" +
    "\053\136\061\350\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\355\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\125\366\001\001\000\004\157\u0105\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\142\372\145\371\146" +
    "\373\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\144\377\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\143\u0100\146\u0101\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\144\u0102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\127\u010b\001\001\000" +
    "\004\157\u0117\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\136\u010e\141\u010f\001\001\000\004\140\u0112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\137\u0115\001" +
    "\001\000\004\140\u0116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\130\u011c\001\001\000\004\157\u0129\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\147\u011f\152" +
    "\u0120\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\151\u0123\001\001\000\004\150\u0125\001\001\000\002\001" +
    "\001\000\004\151\u0126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\131\u012f" +
    "\001\001\000\004\157\u013b\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\153\u0131\156\u0133\001\001\000\002" +
    "\001\001\000\004\155\u0134\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\154\u0136\001\001\000\002\001\001" +
    "\000\004\155\u0138\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\126\u0141\001\001\000\004\157" +
    "\u014d\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\132\u0143\135\u0145\001\001\000\002\001\001\000\004\134" +
    "\u0146\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\133\u0148\001\001\000\002\001\001\000\004\134\u014a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\055" +
    "\u015c\056\u015d\057\u015e\001\001\000\004\226\u0159\001\001" +
    "\000\002\001\001\000\004\071\u015a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\u0162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\073\u0166\001\001\000\002\001" +
    "\001\000\066\002\051\003\063\004\057\011\101\012\072" +
    "\017\061\020\044\025\045\026\046\033\075\034\056\042" +
    "\047\044\042\062\053\064\064\066\u0168\070\066\072\076" +
    "\074\074\077\050\101\052\103\065\122\036\124\041\204" +
    "\055\206\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\201\u016f\001\001\000\004\203\u0170\001\001\000\002" +
    "\001\001\000\004\200\u0171\001\001\000\002\001\001\000" +
    "\004\201\u0173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\165\u017b\001\001\000\010\177\u017c" +
    "\202\026\203\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\167\u017e\001\001\000\002\001\001\000\070" +
    "\002\u0182\003\063\004\057\011\101\012\072\017\061\020" +
    "\044\025\045\026\046\033\075\034\056\042\u0181\044\042" +
    "\062\u0184\064\064\070\u0186\072\076\074\u0189\077\050\101" +
    "\u0183\103\065\122\u0180\124\041\170\u018a\172\u0187\204\u0185" +
    "\206\054\001\001\000\072\002\u0182\003\063\004\057\011" +
    "\101\012\072\017\061\020\044\025\045\026\046\033\075" +
    "\034\056\042\u0181\044\042\062\u0184\064\064\070\u0186\072" +
    "\076\074\u0189\077\050\101\u0183\103\065\122\u0180\124\041" +
    "\170\u018d\171\u0196\172\u0187\204\u0185\206\054\001\001\000" +
    "\072\002\u0182\003\063\004\057\011\101\012\072\017\061" +
    "\020\044\025\045\026\046\033\075\034\056\042\u0181\044" +
    "\042\062\u0184\064\064\070\u0186\072\076\074\u0189\077\050" +
    "\101\u0183\103\065\122\u0180\124\041\170\u018d\171\u0195\172" +
    "\u0187\204\u0185\206\054\001\001\000\072\002\u0182\003\063" +
    "\004\057\011\101\012\072\017\061\020\044\025\045\026" +
    "\046\033\075\034\056\042\u0181\044\042\062\u0184\064\064" +
    "\070\u0186\072\076\074\u0189\077\050\101\u0183\103\065\122" +
    "\u0180\124\041\170\u018d\171\u0194\172\u0187\204\u0185\206\054" +
    "\001\001\000\072\002\u0182\003\063\004\057\011\101\012" +
    "\072\017\061\020\044\025\045\026\046\033\075\034\056" +
    "\042\u0181\044\042\062\u0184\064\064\070\u0186\072\076\074" +
    "\u0189\077\050\101\u0183\103\065\122\u0180\124\041\170\u018d" +
    "\171\u0193\172\u0187\204\u0185\206\054\001\001\000\072\002" +
    "\u0182\003\063\004\057\011\101\012\072\017\061\020\044" +
    "\025\045\026\046\033\075\034\056\042\u0181\044\042\062" +
    "\u0184\064\064\070\u0186\072\076\074\u0189\077\050\101\u0183" +
    "\103\065\122\u0180\124\041\170\u018d\171\u0192\172\u0187\204" +
    "\u0185\206\054\001\001\000\072\002\u0182\003\063\004\057" +
    "\011\101\012\072\017\061\020\044\025\045\026\046\033" +
    "\075\034\056\042\u0181\044\042\062\u0184\064\064\070\u0186" +
    "\072\076\074\u0189\077\050\101\u0183\103\065\122\u0180\124" +
    "\041\170\u018d\171\u0191\172\u0187\204\u0185\206\054\001\001" +
    "\000\072\002\u0182\003\063\004\057\011\101\012\072\017" +
    "\061\020\044\025\045\026\046\033\075\034\056\042\u0181" +
    "\044\042\062\u0184\064\064\070\u0186\072\076\074\u0189\077" +
    "\050\101\u0183\103\065\122\u0180\124\041\170\u018d\171\u0190" +
    "\172\u0187\204\u0185\206\054\001\001\000\072\002\u0182\003" +
    "\063\004\057\011\101\012\072\017\061\020\044\025\045" +
    "\026\046\033\075\034\056\042\u0181\044\042\062\u0184\064" +
    "\064\070\u0186\072\076\074\u0189\077\050\101\u0183\103\065" +
    "\122\u0180\124\041\170\u018d\171\u018f\172\u0187\204\u0185\206" +
    "\054\001\001\000\004\043\u018e\001\001\000\072\002\u0182" +
    "\003\063\004\057\011\101\012\072\017\061\020\044\025" +
    "\045\026\046\033\075\034\056\042\u0181\044\042\062\u0184" +
    "\064\064\070\u0186\072\076\074\u0189\077\050\101\u0183\103" +
    "\065\122\u0180\124\041\170\u018d\171\u018c\172\u0187\204\u0185" +
    "\206\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\165\u0198\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\117\u019b\001\001\000\016" +
    "\161\015\163\u019c\164\012\166\011\173\010\175\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\222\u01a0\001\001\000\066\002\u01a4\003\063\004" +
    "\057\011\101\012\072\017\061\020\044\025\045\026\046" +
    "\033\075\034\056\042\u01a3\044\042\062\u01a6\064\064\070" +
    "\u01a8\072\076\074\u01a9\077\050\101\u01a5\103\065\120\u01a2" +
    "\122\u01a1\124\041\204\u01a7\206\054\001\001\000\070\002" +
    "\u01a4\003\063\004\057\011\101\012\072\017\061\020\044" +
    "\025\045\026\046\033\075\034\056\042\u01a3\044\042\062" +
    "\u01a6\064\064\070\u01a8\072\076\074\u01a9\077\050\101\u01a5" +
    "\103\065\120\u01aa\121\u01b3\122\u01a1\124\041\204\u01a7\206" +
    "\054\001\001\000\002\001\001\000\070\002\u01a4\003\063" +
    "\004\057\011\101\012\072\017\061\020\044\025\045\026" +
    "\046\033\075\034\056\042\u01a3\044\042\062\u01a6\064\064" +
    "\070\u01a8\072\076\074\u01a9\077\050\101\u01a5\103\065\120" +
    "\u01aa\121\u01b1\122\u01a1\124\041\204\u01a7\206\054\001\001" +
    "\000\070\002\u01a4\003\063\004\057\011\101\012\072\017" +
    "\061\020\044\025\045\026\046\033\075\034\056\042\u01a3" +
    "\044\042\062\u01a6\064\064\070\u01a8\072\076\074\u01a9\077" +
    "\050\101\u01a5\103\065\120\u01aa\121\u01b0\122\u01a1\124\041" +
    "\204\u01a7\206\054\001\001\000\070\002\u01a4\003\063\004" +
    "\057\011\101\012\072\017\061\020\044\025\045\026\046" +
    "\033\075\034\056\042\u01a3\044\042\062\u01a6\064\064\070" +
    "\u01a8\072\076\074\u01a9\077\050\101\u01a5\103\065\120\u01aa" +
    "\121\u01af\122\u01a1\124\041\204\u01a7\206\054\001\001\000" +
    "\070\002\u01a4\003\063\004\057\011\101\012\072\017\061" +
    "\020\044\025\045\026\046\033\075\034\056\042\u01a3\044" +
    "\042\062\u01a6\064\064\070\u01a8\072\076\074\u01a9\077\050" +
    "\101\u01a5\103\065\120\u01aa\121\u01ae\122\u01a1\124\041\204" +
    "\u01a7\206\054\001\001\000\070\002\u01a4\003\063\004\057" +
    "\011\101\012\072\017\061\020\044\025\045\026\046\033" +
    "\075\034\056\042\u01a3\044\042\062\u01a6\064\064\070\u01a8" +
    "\072\076\074\u01a9\077\050\101\u01a5\103\065\120\u01aa\121" +
    "\u01ad\122\u01a1\124\041\204\u01a7\206\054\001\001\000\070" +
    "\002\u01a4\003\063\004\057\011\101\012\072\017\061\020" +
    "\044\025\045\026\046\033\075\034\056\042\u01a3\044\042" +
    "\062\u01a6\064\064\070\u01a8\072\076\074\u01a9\077\050\101" +
    "\u01a5\103\065\120\u01aa\121\u01ac\122\u01a1\124\041\204\u01a7" +
    "\206\054\001\001\000\070\002\u01a4\003\063\004\057\011" +
    "\101\012\072\017\061\020\044\025\045\026\046\033\075" +
    "\034\056\042\u01a3\044\042\062\u01a6\064\064\070\u01a8\072" +
    "\076\074\u01a9\077\050\101\u01a5\103\065\120\u01aa\121\u01ab" +
    "\122\u01a1\124\041\204\u01a7\206\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CometMachParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CometMachParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CometMachParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String result = "";
    public Node root;
    public int counter = 1;
    
    public void syntax_error(Symbol s){
		report_error("ERROR DE SINTAXIS -- Columna: " + s.right + " Fila: " + s.left + ". En: \"" + s.value + "\"", null);
	}
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception 
    {
        //report_fatal_error("Fatal Error: " + s.value, null);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CometMachParser$actions {
  private final CometMachParser parser;

  /** Constructor */
  CUP$CometMachParser$actions(CometMachParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CometMachParser$do_action(
    int                        CUP$CometMachParser$act_num,
    java_cup.runtime.lr_parser CUP$CometMachParser$parser,
    java.util.Stack            CUP$CometMachParser$stack,
    int                        CUP$CometMachParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CometMachParser$result;

      /* select the action based on the action number */
      switch (CUP$CometMachParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // nVoid_E2 ::= tVoid NT$12 nVoid_E1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;

              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nVoid_E2",123, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // NT$12 ::= 
            {
              Object RESULT =null;
parser.report_error("Error declaracion de funcion void","Error");
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("NT$12",155, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // nVoid_E2 ::= tVoid tId nVoid_E1 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		            
                                Node n = new Node("Void");
                                Node n1 = new Node("Type");
                                Node n2 = new Node("id");
                                n2.setNodeNum(parser.counter++);
                                n1.setNodeNum(parser.counter++);
                                n.setNodeNum(parser.counter++);
                                n1.setValue(v.toString());
                                n2.setValue(i.toString());
                                n.addChild((Node) n1);
                                n.addChild((Node) n2);
                                n.addChild((Node) e);
                                RESULT = n; 
                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nVoid_E2",123, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // nVoid_E1 ::= tParOpen nParam tParClose nInside_Void 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		            
                                                    Node n = new Node("Parameters");
                                                    n.setNodeNum(parser.counter++);
                                                    n.addChild((Node) p);
                                                    n.addChild((Node) v);
                                                    RESULT = n; 
                                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nVoid_E1",122, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // nInside_Void ::= tInit nList_DI tEnd 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		
                                    Node n= new Node("Inside_Void");
                                    n.setNodeNum(parser.counter++);
                                    n.addChild((Node) l);
                                    RESULT=n;
                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nInside_Void",124, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // nVoid ::= nVoid_E2 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT=v;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nVoid",121, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // nFunc_E2 ::= tFunction NT$11 nFunc_E1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;

              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nFunc_E2",116, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // NT$11 ::= 
            {
              Object RESULT =null;
parser.report_error("Error declaracion de funcion","Error");
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("NT$11",154, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // nFunc_E2 ::= tFunction nVP_Types tId nFunc_E1 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		            
                                Node n = new Node("Func");
                                Node n1 = new Node("Type");
                                Node n2 = new Node("id_Type");
                                Node n3 = new Node("id");
                                n3.setNodeNum(parser.counter++);
                                n2.setNodeNum(parser.counter++);
                                n1.setNodeNum(parser.counter++);
                                n.setNodeNum(parser.counter++);
                                n1.setValue(f.toString());
                                n2.setValue(v.toString());
                                n3.setValue(i.toString());
                                n.addChild((Node) n1);
                                n.addChild((Node) n2);
                                n.addChild((Node) n3);
                                n.addChild((Node) e);
                                RESULT = n; 
                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nFunc_E2",116, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // nFunc_E1 ::= tParOpen nParam tParClose nInside_Func 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		            
                                                    Node n = new Node("Parameters");
                                                    n.setNodeNum(parser.counter++);
                                                    n.addChild((Node) p);
                                                    n.addChild((Node) f);
                                                    RESULT = n; 
                                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nFunc_E1",115, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // nInside_Func ::= tInit nList_Func tEnd 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		
                                    Node n= new Node("Inside_Func");
                                    n.setNodeNum(parser.counter++);
                                    n.addChild((Node) l);
                                    RESULT=n;
                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nInside_Func",117, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // nFunc ::= nFunc_E2 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT=f;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nFunc",114, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // nCallMethod_E2 ::= tId tStapleOpen error NT$10 nCallMethod_E1 tStapleClose tEndSentence 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).value;

              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nCallMethod_E2",132, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-6)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // NT$10 ::= 
            {
              Object RESULT =null;
parser.report_error("Error en llamada de metodos","Error");
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("NT$10",153, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // nCallMethod_E2 ::= tId error NT$9 tEndSentence 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;

              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nCallMethod_E2",132, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // NT$9 ::= 
            {
              Object RESULT =null;
parser.report_error("Error en llamada de metodos","Error");
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("NT$9",152, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // nCallMethod_E2 ::= tId tStapleOpen nCallMethod_E1 tStapleClose tEndSentence 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		
                                        Node n = new Node("Method");
                                        Node n1 = new Node("Id");
                                        n1.setValue(i.toString());
                                        n1.setNodeNum(parser.counter++);
                                        n.setNodeNum(parser.counter++);
                                        n.addChild((Node)n1);
                                        n.addChild((Node)c);
                                        RESULT=n;
                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nCallMethod_E2",132, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // nCallMethod_E2 ::= tId tStapleOpen tStapleClose tEndSentence 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).value;
		int soleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int soright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object so = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		Node n = new Node("Method");
                                        Node n1 = new Node("Id");
                                        n1.setValue(i.toString() + so.toString() + sc.toString());
                                        n1.setNodeNum(parser.counter++);
                                        n.setNodeNum(parser.counter++);
                                        n.addChild((Node)n1);
                                        RESULT=n;
                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nCallMethod_E2",132, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // nCallMethod_E1 ::= nAssign_Method 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT=a;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nCallMethod_E1",131, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // nCallMethod ::= nCallMethod_E2 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT=c;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nCallMethod",130, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // nAssign_Method_E3 ::= nParam_Value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                        Node n = new Node("Param");
                                        Node n1 = new Node("Val");
                                        n1.setValue(v.toString());
                                        n1.setNodeNum(parser.counter++);
                                        n.setNodeNum(parser.counter++);
                                        n.addChild((Node)n1);
                                        RESULT=n;
                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nAssign_Method_E3",136, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // nAssign_Method_E3 ::= nParam_Value nAssign_Method_E2 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                                    Node n = new Node("Param");
                                                    Node n1 = new Node("Val");
                                                    n1.setValue(v.toString());
                                                    n1.setNodeNum(parser.counter++);
                                                    n.setNodeNum(parser.counter++);
                                                    n.addChild((Node)n1);
                                                    n.addChild((Node)a);
                                                    RESULT=n;
                                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nAssign_Method_E3",136, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // nAssign_Method_E2 ::= tComma nAssign_Method_E1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                                RESULT=a;
                                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nAssign_Method_E2",135, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // nAssign_Method_E1 ::= nParam_Value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                        Node n = new Node("Param");
                                        Node n1 = new Node("Val");
                                        n1.setValue(v.toString());
                                        n1.setNodeNum(parser.counter++);
                                        n.setNodeNum(parser.counter++);
                                        n.addChild((Node)n1);
                                        RESULT=n;
                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nAssign_Method_E1",134, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // nAssign_Method_E1 ::= nParam_Value nAssign_Method_E2 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                                    Node n = new Node("Param");
                                                    Node n1 = new Node("Val");
                                                    n1.setValue(v.toString());
                                                    n1.setNodeNum(parser.counter++);
                                                    n.setNodeNum(parser.counter++);
                                                    n.addChild((Node)n1);
                                                    n.addChild((Node)a);
                                                    RESULT=n;
                                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nAssign_Method_E1",134, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // nAssign_Method ::= nAssign_Method_E3 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT=a;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nAssign_Method",133, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // nParam_Value ::= tNumberI 
            {
              Object RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		String ni = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT=ni;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nParam_Value",137, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // nParam_Value ::= tNumberD 
            {
              Object RESULT =null;
		int ndleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		String nd = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT=nd;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nParam_Value",137, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // nParam_Value ::= tSentence 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		String val = s.toString().replaceAll("\"", "");
                                            RESULT=val;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nParam_Value",137, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // nParam_Value ::= tFalse 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT=f;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nParam_Value",137, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // nParam_Value ::= tTrue 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT=t;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nParam_Value",137, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // nParam_Value ::= tChar 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT=c;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nParam_Value",137, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // nParam_Value ::= tId 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT=i;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nParam_Value",137, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // nReturn ::= tReturn nAssignation_E1 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                        Node tmp = new Node("Return");
                                        Node n1 = new Node("Type");
                                        Node n2 = new Node("Val");
                                        n1.setValue(t.toString());
                                        n2.setValue(a.toString());
                                        n1.setNodeNum(parser.counter++);
                                        n2.setNodeNum(parser.counter++);
                                        tmp.setNodeNum(parser.counter++);
                                        tmp.addChild((Node) n1);
                                        tmp.addChild((Node) n2);
                                        RESULT= tmp;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nReturn",120, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // nList_Func_Repeat ::= 
            {
              Object RESULT =null;
		
                                                Node tmp = new Node("vacio");
                                                RESULT= tmp; 
                                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nList_Func_Repeat",119, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // nList_Func_Repeat ::= nList_Func 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT=i; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nList_Func_Repeat",119, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // nList_Func ::= nCallMethod nList_Func_Repeat 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                    String name = ((Node)r).getName(); 
                                    if(name.equals("vacio")){
                                        RESULT=c;      
                                    }else{
                                        Node tmp = new Node("List");
                                        tmp.addChild((Node) c);
                                        tmp.addChild((Node) r);
                                        tmp.setNodeNum(parser.counter++);
                                        RESULT= tmp;
                                    } 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nList_Func",118, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // nList_Func ::= nReturn nList_Func_Repeat 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                    String name = ((Node)r).getName(); 
                                    if(name.equals("vacio")){
                                        RESULT=t;      
                                    }else{
                                        Node tmp = new Node("List");
                                        tmp.addChild((Node) t);
                                        tmp.addChild((Node) r);
                                        tmp.setNodeNum(parser.counter++);
                                        RESULT= tmp;
                                    } 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nList_Func",118, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // nList_Func ::= nBox nList_Func_Repeat 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                    String name = ((Node)r).getName(); 
                                    if(name.equals("vacio")){
                                        RESULT=b;      
                                    }else{
                                        Node tmp = new Node("List");
                                        tmp.addChild((Node) b);
                                        tmp.addChild((Node) r);
                                        tmp.setNodeNum(parser.counter++);
                                        RESULT= tmp;
                                    } 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nList_Func",118, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // nList_Func ::= nSwap nList_Func_Repeat 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                    String name = ((Node)r).getName(); 
                                    if(name.equals("vacio")){
                                        RESULT=s;      
                                    }else{
                                        Node tmp = new Node("List");
                                        tmp.addChild((Node) s);
                                        tmp.addChild((Node) r);
                                        tmp.setNodeNum(parser.counter++);
                                        RESULT= tmp;
                                    } 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nList_Func",118, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // nList_Func ::= nCicle nList_Func_Repeat 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                    String name = ((Node)r).getName(); 
                                    if(name.equals("vacio")){
                                        RESULT=c;      
                                    }else{
                                        Node tmp = new Node("List");
                                        tmp.addChild((Node) c);
                                        tmp.addChild((Node) r);
                                        tmp.setNodeNum(parser.counter++);
                                        RESULT= tmp;
                                    } 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nList_Func",118, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // nList_Func ::= nFor nList_Func_Repeat 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                    String name = ((Node)r).getName(); 
                                    if(name.equals("vacio")){
                                        RESULT=f;      
                                    }else{
                                        Node tmp = new Node("List");
                                        tmp.addChild((Node) f);
                                        tmp.addChild((Node) r);
                                        tmp.setNodeNum(parser.counter++);
                                        RESULT= tmp;
                                    } 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nList_Func",118, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // nList_Func ::= nAssignation nList_Func_Repeat 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                    String name = ((Node)r).getName(); 
                                    if(name.equals("vacio")){
                                        RESULT=a;      
                                    }else{
                                        Node tmp = new Node("List");
                                        tmp.addChild((Node) a);
                                        tmp.addChild((Node) r);
                                        tmp.setNodeNum(parser.counter++);
                                        RESULT= tmp;
                                    } 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nList_Func",118, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // nList_Func ::= nTypes nList_Func_Repeat 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                    String name = ((Node)r).getName(); 
                                    if(name.equals("vacio")){
                                        RESULT=t;      
                                    }else{
                                        Node tmp = new Node("List");
                                        tmp.addChild((Node) t);
                                        tmp.addChild((Node) r);
                                        tmp.setNodeNum(parser.counter++);
                                        RESULT= tmp;
                                    } 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nList_Func",118, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // nList_Func ::= nIf nList_Func_Repeat 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                    String name = ((Node)r).getName(); 
                                    if(name.equals("vacio")){
                                        RESULT=i;      
                                    }else{
                                        Node tmp = new Node("List");
                                        tmp.addChild((Node) i);
                                        tmp.addChild((Node) r);
                                        tmp.setNodeNum(parser.counter++);
                                        RESULT= tmp;
                                    } 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nList_Func",118, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // nParam_E3 ::= nVP_Types tId 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                    Node n = new Node("Param");
                                    Node n1 = new Node("Type");
                                    Node n2 = new Node("id");
                                    n2.setValue(i.toString());
                                    n2.setNodeNum(parser.counter++);
                                    n1.setValue(v.toString());
                                    n1.setNodeNum(parser.counter++);
                                    n.setNodeNum(parser.counter++);
                                    n.addChild((Node)n1);
                                    n.addChild((Node)n2);
                                    RESULT = n ;
                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nParam_E3",128, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // nParam_E3 ::= nVP_Types tId nParam_E2 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                            Node n = new Node("Param");
                                            Node n1 = new Node("Type");
                                            Node n2 = new Node("id");
                                            n2.setValue(i.toString());
                                            n2.setNodeNum(parser.counter++);
                                            n1.setValue(v.toString());
                                            n1.setNodeNum(parser.counter++);
                                            n.setNodeNum(parser.counter++);
                                            n.addChild((Node)n1);
                                            n.addChild((Node)n2);
                                            n.addChild((Node)p);
                                            RESULT = n ;
                                            
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nParam_E3",128, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // nParam_E2 ::= tComma nVP_Types nParam_E1 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                            Node n = new Node("Param");
                                            Node n1 = new Node("Type");
                                            n1.setValue(v.toString());
                                            n1.setNodeNum(parser.counter++);
                                            n.setNodeNum(parser.counter++);
                                            n.addChild((Node)n1);
                                            n.addChild((Node)p);
                                            RESULT = n ;
                                            
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nParam_E2",127, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // nParam_E1 ::= tId 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                        Node n = new Node("Param");
                        Node n1 = new Node("id");
                        n1.setValue(i.toString());
                        n1.setNodeNum(parser.counter++);
                        n.setNodeNum(parser.counter++);
                        n.addChild((Node)n1);
                        RESULT = n ;
                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nParam_E1",126, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // nParam_E1 ::= tId nParam_E2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 
                                Node n = new Node("Param");
                                Node n1 = new Node("id");
                                n1.setValue(i.toString());
                                n1.setNodeNum(parser.counter++);
                                n.setNodeNum(parser.counter++);
                                n.addChild((Node)n1);
                                n.addChild((Node)p);
                                RESULT = n;
                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nParam_E1",126, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // nParam ::= nParam_E3 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT = p;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nParam",125, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // nVP_Types ::= tSymbol 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT = s;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nVP_Types",129, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // nVP_Types ::= tWord 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT = w;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nVP_Types",129, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // nVP_Types ::= tDecimal 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT = d;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nVP_Types",129, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // nVP_Types ::= tBoolean 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT = b;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nVP_Types",129, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // nVP_Types ::= tInteger 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT = i;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nVP_Types",129, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // nSwap_E2 ::= tSwap error NT$8 nSwap_E1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;

              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nSwap_E2",65, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NT$8 ::= 
            {
              Object RESULT =null;
parser.report_error("Error en declaracion de swap","Error");
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("NT$8",151, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // nSwap_E2 ::= tSwap nSwap_E1 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int nsleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object ns = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		    
                        Node n = new Node("Swap");
                        Node n1 = new Node("Type");
                        n1.setValue(s.toString()); 
                        n1.setNodeNum(parser.counter++);
                        n.setNodeNum(parser.counter++);
                        n.addChild((Node) n1);
                        n.addChild((Node) ns);
                        RESULT = n; 
                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nSwap_E2",65, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // nSwap_E1 ::= tParOpen tId tParClose nInside_Swap 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int nsleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object ns = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		            
                                                Node n = new Node("Condition");
                                                Node n1 = new Node("Val");
                                                n1.setNodeNum(parser.counter++);
                                                n.setNodeNum(parser.counter++);
                                                n1.setValue(i.toString());
                                                n.addChild((Node) n1);
                                                n.addChild((Node) ns);
                                                RESULT = n; 
                                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nSwap_E1",64, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // nInside_Swap ::= tInit nList_Is nDefault tEnd 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		
                                    Node n= new Node("Inside_Swap");
                                    n.setNodeNum(parser.counter++);
                                    n.addChild((Node) l);
                                    n.addChild((Node) d);
                                    RESULT=n;
                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nInside_Swap",66, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // nSwap ::= nSwap_E2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nSwap",63, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // nDefault_E1 ::= tDefault nInside_Default 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int ndleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object nd = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		    
                        Node n = new Node("Default");
                        Node n1 = new Node("Type");
                        n1.setValue(d.toString()); 
                        n1.setNodeNum(parser.counter++);
                        n.setNodeNum(parser.counter++);
                        n.addChild((Node) n1);
                        n.addChild((Node) nd);
                        RESULT = n; 
                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nDefault_E1",73, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // nInside_Default ::= tInit nList_DI tEnd 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		
                                    Node n= new Node("Inside_Default");
                                    n.setNodeNum(parser.counter++);
                                    n.addChild((Node) l);
                                    RESULT=n;
                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nInside_Default",74, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // nDefault ::= nDefault_E1 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT = d; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nDefault",72, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // nList_Is_Repeat ::= 
            {
              Object RESULT =null;
		
                                                Node tmp = new Node("vacio");
                                                RESULT= tmp; 
                                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nList_Is_Repeat",76, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // nList_Is_Repeat ::= nList_Is 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT=i; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nList_Is_Repeat",76, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // nList_Is ::= nIs nList_Is_Repeat 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                String name = ((Node)r).getName(); 
                                if(name.equals("vacio")){
                                    RESULT=i;      
                                }else{
                                    Node tmp = new Node("List");
                                    tmp.addChild((Node) i);
                                    tmp.addChild((Node) r);
                                    tmp.setNodeNum(parser.counter++);
                                    RESULT= tmp;
                                }
                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nList_Is",75, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // nIs_E2 ::= tIs error NT$7 nIs_E1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;

              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nIs_E2",69, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NT$7 ::= 
            {
              Object RESULT =null;
parser.report_error("Error en declaracion de is de swap","Error");
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("NT$7",150, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // nIs_E2 ::= tIs nIs_E1 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int nileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object ni = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		    
                        Node n = new Node("Is");
                        Node n1 = new Node("Type");
                        n1.setValue(i.toString()); 
                        n1.setNodeNum(parser.counter++);
                        n.setNodeNum(parser.counter++);
                        n.addChild((Node) n1);
                        n.addChild((Node) ni);
                        RESULT = n; 
                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nIs_E2",69, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // nIs_E1 ::= tParOpen nObject_Is tParClose nInside_Is 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int nileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object ni = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		            
                                                        Node n = new Node("Condition");
                                                        Node n1 = new Node("Val");
                                                        n1.setNodeNum(parser.counter++);
                                                        n.setNodeNum(parser.counter++);
                                                        n1.setValue(o.toString());
                                                        n.addChild((Node) n1);
                                                        n.addChild((Node) ni);
                                                        RESULT = n; 
                                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nIs_E1",68, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // nInside_Is ::= tInit nList_DI tEnd 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		
                                    Node n= new Node("Inside_Is");
                                    n.setNodeNum(parser.counter++);
                                    n.addChild((Node) l);
                                    RESULT=n;
                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nInside_Is",71, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // nIs ::= nIs_E2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT = i; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nIs",67, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // nObject_Is ::= tChar 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT = c; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nObject_Is",70, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // nObject_Is ::= tNumberI 
            {
              Object RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		String ni = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT = ni; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nObject_Is",70, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // nCicle_E3 ::= tCicle error NT$6 nCicle_E2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;

              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nCicle_E3",61, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$6 ::= 
            {
              Object RESULT =null;
parser.report_error("Error en declaracion de cicle","Error");
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("NT$6",149, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // nCicle_E3 ::= tCicle nCicle_E2 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int ncleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object nc = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		    
                        Node n = new Node("Cicle");
                        Node n1 = new Node("Type");
                        n1.setValue(c.toString()); 
                        n1.setNodeNum(parser.counter++);
                        n.setNodeNum(parser.counter++);
                        n.addChild((Node) n1);
                        n.addChild((Node) nc);
                        RESULT = n; 
                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nCicle_E3",61, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // nCicle_E2 ::= tParOpen nSentences tParClose nInside_Cicle 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int nicleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int nicright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object nic = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		            
                                                        Node n = new Node("Condition");
                                                        n.setNodeNum(parser.counter++);
                                                        n.addChild((Node) s);
                                                        n.addChild((Node) nic);
                                                        RESULT = n; 
                                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nCicle_E2",60, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // nInside_Cicle ::= tInit nList_DI tEnd 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		
                                    Node n= new Node("Inside_Cicle");
                                    n.setNodeNum(parser.counter++);
                                    n.addChild((Node) l);
                                    RESULT=n;
                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nInside_Cicle",62, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // nCicle ::= nCicle_E3 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT = c; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nCicle",58, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // nFor_E2 ::= tFor error NT$5 nFor_E1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;

              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nFor_E2",56, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$5 ::= 
            {
              Object RESULT =null;
parser.report_error("Error en declaracion de for","Error");
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("NT$5",148, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // nFor_E2 ::= tFor nFor_E1 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int nfleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object nf = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		    
                        Node n = new Node("For");
                        Node n1 = new Node("Type");
                        n1.setValue(f.toString()); 
                        n1.setNodeNum(parser.counter++);
                        n.setNodeNum(parser.counter++);
                        n.addChild((Node) n1);
                        n.addChild((Node) nf);
                        RESULT = n; 
                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nFor_E2",56, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // nFor_E1 ::= tParOpen nForSentence tParClose nInside_For 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int nifleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int nifright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object nif = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		            
                                                        Node n = new Node("Range");
                                                        n.setNodeNum(parser.counter++);
                                                        n.addChild((Node) f);
                                                        n.addChild((Node) nif);
                                                        RESULT = n; 
                                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nFor_E1",55, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // nInside_For ::= tInit nList_DI tEnd 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		
                                    Node n= new Node("Inside_For");
                                    n.setNodeNum(parser.counter++);
                                    n.addChild((Node) l);
                                    RESULT=n;
                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nInside_For",57, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // nFor ::= nFor_E2 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT=f;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nFor",54, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // nForObjectOptions ::= tId 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT=i;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nForObjectOptions",45, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // nForObjectOptions ::= tNumberI 
            {
              Object RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		String ni = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT=ni;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nForObjectOptions",45, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // nForObjectOptions ::= tNumberD 
            {
              Object RESULT =null;
		int ndleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		String nd = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT=nd;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nForObjectOptions",45, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // nForSentence_E1 ::= nForObjectOptions tTo nForObjectOptions tEndSentence tId 
            {
              Object RESULT =null;
		int fo1left = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)).left;
		int fo1right = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)).right;
		Object fo1 = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)).value;
		int fo2left = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int fo2right = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object fo2 = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                                                    Node n = new Node("To");
                                                                    Node n1 = new Node("Val");
                                                                    Node n2 = new Node("Val");
                                                                    Node n3 = new Node("ID");
                                                                    n1.setValue(fo1.toString());
                                                                    n2.setValue(fo2.toString());
                                                                    n3.setValue(i.toString());
                                                                    n1.setNodeNum(parser.counter++);
                                                                    n2.setNodeNum(parser.counter++);
                                                                    n3.setNodeNum(parser.counter++);
                                                                    n.setNodeNum(parser.counter++);
                                                                    n.addChild((Node) n1);
                                                                    n.addChild((Node) n2);
                                                                    n.addChild((Node) n3);
                                                                    RESULT=n;
                                                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nForSentence_E1",44, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // nForSentence ::= nForSentence_E1 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT=f;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nForSentence",43, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // nIf_E2 ::= tIf error NT$4 nIf_E1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;

              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nIf_E2",50, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$4 ::= 
            {
              Object RESULT =null;
parser.report_error("Error en declaracion de if","Error");
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("NT$4",147, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // nIf_E2 ::= tIf nIf_E1 
            {
              Object RESULT =null;
		int nifleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int nifright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object nif = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                            
                            Node n = new Node("If");
                            //System.out.println("en condition nif_e2 ");
                            Node n1 = new Node("Type");
                            n1.setValue(nif.toString()); 
                            n1.setNodeNum(parser.counter++);
                            n.setNodeNum(parser.counter++);
                            n.addChild((Node) n1);
                            n.addChild((Node) i);

                            RESULT = n; 
                            
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nIf_E2",50, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // nIf_E1 ::= tParOpen nInsideComp tParClose nInside_If 
            {
              Object RESULT =null;
		int poleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).left;
		int poright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).right;
		Object po = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).value;
		int icleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int icright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object ic = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int nifleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int nifright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object nif = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                                                    
                                                                    Node n = new Node("Condition");
                                                                    n.setNodeNum(parser.counter++);
                                                                    n.addChild((Node) ic);
                                                                    n.addChild((Node) nif);
                                                                    //System.out.println("en condition nif_e1");
                                                                    RESULT = n; 
                                                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nIf_E1",49, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // nInside_If ::= tInit nList_DI tEnd tElse tInit nList_DI tEnd 
            {
              Object RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-5)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-5)).right;
		Object l1 = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-5)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object l2 = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		
                                                                    
                                                                    Node n = new Node("Then");
                                                                    Node nif = new Node("Inside_If");
                                                                    Node nelse = new Node("Inside_Else");
                                                                    nif.addChild((Node) l1);
                                                                    nelse.addChild((Node) l2);
                                                                    nif.setNodeNum(parser.counter++);
                                                                    nelse.setNodeNum(parser.counter++);
                                                                    n.setNodeNum(parser.counter++);
                                                                    n.addChild((Node) nif);
                                                                    n.addChild((Node) nelse);
                                                                    //System.out.println("en Inside_if 2");
                                                                    RESULT = n; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nInside_If",51, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-6)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // nInside_If ::= tInit nList_DI tEnd 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		
                                        
                                        Node n= new Node("Inside_If");
                                        n.setNodeNum(parser.counter++);
                                        n.addChild((Node) l);
                                        //System.out.println("en Inside_if 1");
                                        RESULT=n;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nInside_If",51, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // nIf ::= nIf_E2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT=i; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nIf",48, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // nList_DI_Repeat ::= 
            {
              Object RESULT =null;
		
                                                Node tmp = new Node("vacio");
                                                RESULT= tmp; 
                                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nList_DI_Repeat",53, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // nList_DI_Repeat ::= nList_DI 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT=i; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nList_DI_Repeat",53, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // nList_DI ::= nCallMethod nList_DI_Repeat 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                    String name = ((Node)r).getName(); 
                                    if(name.equals("vacio")){
                                        RESULT=c;      
                                    }else{
                                        Node tmp = new Node("List");
                                        tmp.addChild((Node) c);
                                        tmp.addChild((Node) r);
                                        tmp.setNodeNum(parser.counter++);
                                        RESULT= tmp;
                                    } 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nList_DI",52, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // nList_DI ::= nBox nList_DI_Repeat 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                        String name = ((Node)r).getName(); 
                                        if(name.equals("vacio")){
                                            RESULT=b;      
                                        }else{
                                            Node tmp = new Node("List");
                                            tmp.addChild((Node) b);
                                            tmp.addChild((Node) r);
                                            tmp.setNodeNum(parser.counter++);
                                            RESULT= tmp;
                                        }
                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nList_DI",52, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // nList_DI ::= nSwap nList_DI_Repeat 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                        String name = ((Node)r).getName(); 
                                        if(name.equals("vacio")){
                                            RESULT=s;      
                                        }else{
                                            Node tmp = new Node("List");
                                            tmp.addChild((Node) s);
                                            tmp.addChild((Node) r);
                                            tmp.setNodeNum(parser.counter++);
                                            RESULT= tmp;
                                        }
                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nList_DI",52, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // nList_DI ::= nCicle nList_DI_Repeat 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                        String name = ((Node)r).getName(); 
                                        if(name.equals("vacio")){
                                            RESULT=c;      
                                        }else{
                                            Node tmp = new Node("List");
                                            tmp.addChild((Node) c);
                                            tmp.addChild((Node) r);
                                            tmp.setNodeNum(parser.counter++);
                                            RESULT= tmp;
                                        }
                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nList_DI",52, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // nList_DI ::= nFor nList_DI_Repeat 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                        String name = ((Node)r).getName(); 
                                        if(name.equals("vacio")){
                                            RESULT=f;      
                                        }else{
                                            Node tmp = new Node("List");
                                            tmp.addChild((Node) f);
                                            tmp.addChild((Node) r);
                                            tmp.setNodeNum(parser.counter++);
                                            RESULT= tmp;
                                        }
                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nList_DI",52, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // nList_DI ::= nAssignation nList_DI_Repeat 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                        String name = ((Node)r).getName(); 
                                        if(name.equals("vacio")){
                                            RESULT=a;      
                                        }else{
                                            Node tmp = new Node("List");
                                            tmp.addChild((Node) a);
                                            tmp.addChild((Node) r);
                                            tmp.setNodeNum(parser.counter++);
                                            RESULT= tmp;
                                        }
                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nList_DI",52, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // nList_DI ::= nTypes nList_DI_Repeat 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                        String name = ((Node)r).getName(); 
                                        if(name.equals("vacio")){
                                            RESULT=t;      
                                        }else{
                                            Node tmp = new Node("List");
                                            tmp.addChild((Node) t);
                                            tmp.addChild((Node) r);
                                            tmp.setNodeNum(parser.counter++);
                                            RESULT= tmp;
                                        }
                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nList_DI",52, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // nList_DI ::= nIf nList_DI_Repeat 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                    String name = ((Node)r).getName(); 
                                    if(name.equals("vacio")){
                                        RESULT=i;      
                                    }else{
                                        Node tmp = new Node("List");
                                        tmp.addChild((Node) i);
                                        tmp.addChild((Node) r);
                                        tmp.setNodeNum(parser.counter++);
                                        RESULT= tmp;
                                    } 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nList_DI",52, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // nInsideComp_E1 ::= nSentences 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 //System.out.println("llego a compare 2 ");
                                                 RESULT=s;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nInsideComp_E1",47, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // nInsideComp_E1 ::= nSentences nLogicalOpe nInsideComp_E1 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		                                                
                                                //System.out.println("llego a compare 1 ");
                                                Node n = new Node("Operator_" + l.toString());
                                                n.setNodeNum(parser.counter++);
                                                n.addChild((Node) s);
                                                n.addChild((Node) i);
                                                RESULT = n;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nInsideComp_E1",47, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // nInsideComp ::= nInsideComp_E1 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 //System.out.println("saliendo compare ");
                                                 RESULT = s;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nInsideComp",46, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // nCompObjects ::= tFalse 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT=f;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nCompObjects",41, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // nCompObjects ::= tTrue 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT=t;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nCompObjects",41, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // nCompObjects ::= tNumberD 
            {
              Object RESULT =null;
		int ndleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		String nd = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT=nd;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nCompObjects",41, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // nCompObjects ::= tNumberI 
            {
              Object RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		String ni = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT=ni;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nCompObjects",41, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // nCompObjects ::= tId 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT=i;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nCompObjects",41, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // nLogicalOpe ::= tOr 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT=o;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nLogicalOpe",42, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // nLogicalOpe ::= tAnd 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT=a;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nLogicalOpe",42, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // nSentences_E1 ::= nCompObjects tComparative nCompObjects 
            {
              Object RESULT =null;
		int obleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int obright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object ob = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int ob2left = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int ob2right = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object ob2 = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                                Node n = new Node(c.toString());
                                                Node n1 = new Node("Val");
                                                Node n2 = new Node("Val");
                                                n1.setValue(ob.toString());
                                                n2.setValue(ob2.toString());
                                                n2.setNodeNum(parser.counter++);
                                                n1.setNodeNum(parser.counter++);
                                                n.setNodeNum(parser.counter++);
                                                n.addChild((Node) n1);
                                                n.addChild((Node) n2);
                                                RESULT = n;
                                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nSentences_E1",40, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // nSentences ::= nSentences_E1 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT=s; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nSentences",39, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // nAssignation_E2 ::= tId error NT$3 nBox_Assign 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;

              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nAssignation_E2",34, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$3 ::= 
            {
              Object RESULT =null;
parser.report_error("Error de asignacion","Error");
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("NT$3",146, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // nAssignation_E2 ::= error NT$2 nAssignation_E1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;

              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nAssignation_E2",34, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$2 ::= 
            {
              Object RESULT =null;
parser.report_error("Error de asignacion","Error");
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("NT$2",145, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // nAssignation_E2 ::= tId tParOpen nVal_Box tParClose tAssign nBox_Assign 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-5)).value;
		int poleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)).left;
		int poright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)).right;
		Object po = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int baleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int baright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object ba = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                        Node n= new Node("Var_Box_Assign");
                                        Node n1 = new Node("Box_ID");
                                        n1.setValue(i.toString() + po.toString() 
                                                    + v.toString()+ pc.toString() 
                                                    + a.toString() + ba.toString());
                                        n1.setNodeNum(parser.counter++);
                                        n.setNodeNum(parser.counter++);
                                        n.addChild((Node) n1);
                                        RESULT=n;
                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nAssignation_E2",34, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-5)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // nAssignation_E2 ::= tId tAssign nAssignation_E1 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                        Node n= new Node("Var_Assign");
                                        Node n1 = new Node("ID");
                                        n1.setValue(i.toString() + a.toString() + e.toString());
                                        n1.setNodeNum(parser.counter++);
                                        n.setNodeNum(parser.counter++);
                                        n.addChild((Node) n1);
                                        RESULT=n;
                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nAssignation_E2",34, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // nAssignation_E1 ::= tSentence tEndSentence 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		 
                                                String val = s.toString().replaceAll("\"", "");
                                                RESULT= val; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nAssignation_E1",33, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // nAssignation_E1 ::= tFalse tEndSentence 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		 RESULT=f; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nAssignation_E1",33, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // nAssignation_E1 ::= tTrue tEndSentence 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		 RESULT=t; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nAssignation_E1",33, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // nAssignation_E1 ::= tChar tEndSentence 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		 RESULT=c; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nAssignation_E1",33, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // nAssignation_E1 ::= tNumberD tEndSentence 
            {
              Object RESULT =null;
		int ndleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		String nd = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		 RESULT=nd; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nAssignation_E1",33, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // nAssignation_E1 ::= tNumberI tEndSentence 
            {
              Object RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int niright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		String ni = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		 RESULT=ni; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nAssignation_E1",33, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // nAssignation_E1 ::= tId tEndSentence 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		 RESULT=i;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nAssignation_E1",33, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // nAssignation ::= nAssignation_E2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nAssignation",32, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // nBox_Assign ::= tNumberD tEndSentence 
            {
              Object RESULT =null;
		int ndleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		String nd = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		 RESULT=nd;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign",110, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // nBox_Assign ::= tId tEndSentence 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		 RESULT=i;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign",110, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // nBox_Assign ::= tFalse tEndSentence 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		 RESULT=f;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign",110, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // nBox_Assign ::= tSentence tEndSentence 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		 
                                            String val = s.toString().replaceAll("\"", "");
                                            RESULT=val; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign",110, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // nBox_Assign ::= tChar tEndSentence 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		 RESULT=c;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign",110, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // nBox_Assign ::= tTrue tEndSentence 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		 RESULT=t;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign",110, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // nBox_Assign ::= tNumberI tEndSentence 
            {
              Object RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int niright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		String ni = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		 RESULT=ni;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign",110, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // nBox_E2 ::= tBox nBox_E1 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object be = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                        Node n = new Node("Declaration");
                        Node n1 = new Node("Type");
                        n1.setValue(b.toString());
                        n1.setNodeNum(parser.counter++);
                        n.setNodeNum(parser.counter++);
                        n.addChild((Node)n1);
                        n.addChild((Node)be);
                        RESULT=n; 
                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_E2",82, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // nBox_E1 ::= tWord tId nBox_EW 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int weleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int weright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object we = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                Node n = new Node("Box_Declaration");
                                Node n1 = new Node("Box_Type");
                                Node n2 = new Node("Box_ID");
                                n1.setNodeNum(parser.counter++);
                                n2.setNodeNum(parser.counter++);
                                n.setNodeNum(parser.counter++);
                                String val = i.toString() + we.toString();
                                n1.setValue(w.toString());
                                n2.setValue(val);
                                n.addChild((Node)n1);
                                n.addChild((Node)n2);        
                                RESULT=n; 
                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_E1",81, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // nBox_E1 ::= tSymbol tId nBox_ES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                Node n = new Node("Box_Declaration");
                                Node n1 = new Node("Box_Type");
                                Node n2 = new Node("Box_ID");
                                n1.setNodeNum(parser.counter++);
                                n2.setNodeNum(parser.counter++);
                                n.setNodeNum(parser.counter++);
                                String val = i.toString() + se.toString();
                                n1.setValue(s.toString());
                                n2.setValue(val);
                                n.addChild((Node)n1);
                                n.addChild((Node)n2);        
                                RESULT=n; 
                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_E1",81, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // nBox_E1 ::= tDecimal tId nBox_ED 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object de = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                Node n = new Node("Box_Declaration");
                                Node n1 = new Node("Box_Type");
                                Node n2 = new Node("Box_ID");
                                n1.setNodeNum(parser.counter++);
                                n2.setNodeNum(parser.counter++);
                                n.setNodeNum(parser.counter++);
                                String val = i.toString() + de.toString();
                                n1.setValue(d.toString());
                                n2.setValue(val);
                                n.addChild((Node)n1);
                                n.addChild((Node)n2);        
                                RESULT=n; 
                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_E1",81, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // nBox_E1 ::= tInteger tId nBox_EI 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object ie = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                Node n = new Node("Box_Declaration");
                                Node n1 = new Node("Box_Type");
                                Node n2 = new Node("Box_ID");
                                n1.setNodeNum(parser.counter++);
                                n2.setNodeNum(parser.counter++);
                                n.setNodeNum(parser.counter++);
                                String val = i.toString() + ie.toString();
                                n1.setValue(in.toString());
                                n2.setValue(val);
                                n.addChild((Node)n1);
                                n.addChild((Node)n2);        
                                RESULT=n; 
                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_E1",81, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // nBox_E1 ::= tBoolean tId nBox_EB 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object be = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                Node n = new Node("Box_Declaration");
                                Node n1 = new Node("Box_Type");
                                Node n2 = new Node("Box_ID");
                                n1.setNodeNum(parser.counter++);
                                n2.setNodeNum(parser.counter++);
                                n.setNodeNum(parser.counter++);
                                String val = i.toString() + be.toString();
                                n1.setValue(b.toString());
                                n2.setValue(val);
                                n.addChild((Node)n1);
                                n.addChild((Node)n2);        
                                RESULT=n; 
                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_E1",81, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // nBox_EW ::= tBoxAssing tParOpen nBox_Assign_Word tParClose tEndSentence 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)).value;
		int poleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).left;
		int poright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).right;
		Object po = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).value;
		int awleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int awright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object aw = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		
                                                    String val = a.toString() + po.toString() 
                                                                + aw.toString() + pc.toString();
                                                    System.out.println(val);
                                                    RESULT=val; 
                                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_EW",86, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // nBox_EW ::= tParOpen nVal_Box tParClose tEndSentence 
            {
              Object RESULT =null;
		int poleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).left;
		int poright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).right;
		Object po = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		
                                                    String val = po.toString() + v.toString() + pc.toString();
                                                    RESULT=val; 
                                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_EW",86, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // nBox_ES ::= tBoxAssing tParOpen nBox_Assign_Sym tParClose tEndSentence 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)).value;
		int poleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).left;
		int poright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).right;
		Object po = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		
                                                    String val = a.toString() + po.toString() 
                                                                + as.toString() + pc.toString();
                                                    System.out.println(val);
                                                    RESULT=val; 
                                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_ES",87, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // nBox_ES ::= tParOpen nVal_Box tParClose tEndSentence 
            {
              Object RESULT =null;
		int poleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).left;
		int poright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).right;
		Object po = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		
                                                    String val = po.toString() + v.toString() + pc.toString();
                                                    RESULT=val; 
                                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_ES",87, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // nBox_ED ::= tBoxAssing tParOpen nBox_Assign_Dec tParClose tEndSentence 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)).value;
		int poleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).left;
		int poright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).right;
		Object po = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object ad = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		
                                                    String val = a.toString() + po.toString() 
                                                                + ad.toString() + pc.toString();
                                                    System.out.println(val);
                                                    RESULT=val; 
                                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_ED",85, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // nBox_ED ::= tParOpen nVal_Box tParClose tEndSentence 
            {
              Object RESULT =null;
		int poleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).left;
		int poright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).right;
		Object po = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		
                                                    String val = po.toString() + v.toString() + pc.toString();
                                                    RESULT=val; 
                                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_ED",85, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // nBox_EI ::= tBoxAssing tParOpen nBox_Assign_Int tParClose tEndSentence 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)).value;
		int poleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).left;
		int poright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).right;
		Object po = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).value;
		int aileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int airight = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object ai = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		
                                                    String val = a.toString() + po.toString() 
                                                                + ai.toString() + pc.toString();
                                                    System.out.println(val);
                                                    RESULT=val; 
                                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_EI",84, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // nBox_EI ::= tParOpen nVal_Box tParClose tEndSentence 
            {
              Object RESULT =null;
		int poleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).left;
		int poright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).right;
		Object po = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		
                                                    String val = po.toString() + v.toString() + pc.toString();
                                                    RESULT=val; 
                                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_EI",84, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // nBox_EB ::= tBoxAssing tParOpen nBox_Assign_Bool tParClose tEndSentence 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)).value;
		int poleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).left;
		int poright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).right;
		Object po = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).value;
		int ableft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int abright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object ab = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		
                                                    String val = a.toString() + po.toString() 
                                                                + ab.toString() + pc.toString();
                                                    System.out.println(val);
                                                    RESULT=val; 
                                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_EB",83, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-4)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // nBox_EB ::= tParOpen nVal_Box tParClose tEndSentence 
            {
              Object RESULT =null;
		int poleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).left;
		int poright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).right;
		Object po = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		
                                                    String val = po.toString() + v.toString() + pc.toString();
                                                    RESULT=val; 
                                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_EB",83, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // nBox ::= nBox_E2 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT=b; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox",80, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // nVal_Box ::= tId 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT=i; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nVal_Box",109, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // nVal_Box ::= tNumberI 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT=n; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nVal_Box",109, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // nBool_Types ::= tFalse 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT=f; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBool_Types",100, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // nBool_Types ::= tTrue 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT=t; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBool_Types",100, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // nBox_Assign_Sym_E3 ::= tChar nBox_Assign_Sym_E2 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                                String val = c.toString() + s.toString();
                                                RESULT = val;
                                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Sym_E3",108, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // nBox_Assign_Sym_E2 ::= tComma nBox_Assign_Sym_E1 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 
                                                String val = c.toString() + s.toString();
                                                RESULT= val;
                                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Sym_E2",107, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // nBox_Assign_Sym_E1 ::= tChar 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		  
                                    String val = c.toString();
                                    RESULT= val;
                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Sym_E1",106, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // nBox_Assign_Sym_E1 ::= tChar nBox_Assign_Sym_E2 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 
                                                    String val = c.toString() + s.toString();
                                                    RESULT= val;
                                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Sym_E1",106, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // nBox_Assign_Sym ::= nBox_Assign_Sym_E3 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT = s;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Sym",105, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // nBox_Assign_Word_E3 ::= tSentence nBox_Assign_Word_E2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                                String val = (s.toString().replaceAll("\"", "")) + w.toString();
                                                RESULT = val;
                                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Word_E3",104, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // nBox_Assign_Word_E2 ::= tComma nBox_Assign_Word_E1 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 
                                                String val = c.toString() + w.toString();
                                                RESULT= val;
                                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Word_E2",103, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // nBox_Assign_Word_E1 ::= tSentence 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		  
                                    String val = s.toString().replaceAll("\"", "");
                                    RESULT= val;
                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Word_E1",102, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // nBox_Assign_Word_E1 ::= tSentence nBox_Assign_Word_E2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 
                                                    String val = (s.toString().replaceAll("\"", "")) + w.toString();
                                                    RESULT= val;
                                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Word_E1",102, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // nBox_Assign_Word ::= nBox_Assign_Word_E3 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT = w;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Word",101, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // nBox_Assign_Dec_E3 ::= tNumberD nBox_Assign_Dec_E2 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                                String val = n.toString() + d.toString();
                                                RESULT = val;
                                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Dec_E3",95, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // nBox_Assign_Dec_E2 ::= tComma nBox_Assign_Dec_E1 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 
                                                String val = c.toString() + d.toString();
                                                RESULT= val;
                                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Dec_E2",94, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // nBox_Assign_Dec_E1 ::= tNumberD 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		  
                                    String val = n.toString();
                                    RESULT= val;
                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Dec_E1",93, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // nBox_Assign_Dec_E1 ::= tNumberD nBox_Assign_Dec_E2 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 
                                                    String val = n.toString() + d.toString();
                                                    RESULT= val;
                                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Dec_E1",93, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // nBox_Assign_Dec ::= nBox_Assign_Dec_E3 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT = d;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Dec",92, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // nBox_Assign_Int_E3 ::= tNumberI nBox_Assign_Int_E2 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                                         String val = n.toString() + i.toString();
                                                         RESULT = val;
                                                         
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Int_E3",91, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // nBox_Assign_Int_E2 ::= tComma nBox_Assign_Int_E1 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 
                                                    String val = c.toString() + i.toString();
                                                    RESULT= val;
                                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Int_E2",90, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // nBox_Assign_Int_E1 ::= tNumberI 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 
                                        String val = n.toString();
                                        RESULT= val;
                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Int_E1",89, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // nBox_Assign_Int_E1 ::= tNumberI nBox_Assign_Int_E2 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 
                                                    String val = n.toString() + i.toString();
                                                    RESULT= val;
                                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Int_E1",89, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // nBox_Assign_Int ::= nBox_Assign_Int_E3 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT = i;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Int",88, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // nBox_Assign_Bool_E3 ::= nBool_Types nBox_Assign_Bool_E2 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                                         String val = t.toString() + b.toString();
                                                         RESULT = val;
                                                         
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Bool_E3",99, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // nBox_Assign_Bool_E2 ::= tComma nBox_Assign_Bool_E1 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 
                                                    String val = c.toString() + b.toString();
                                                    RESULT= val;
                                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Bool_E2",98, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // nBox_Assign_Bool_E1 ::= nBool_Types 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 
                                        String val = t.toString();
                                        RESULT= val;
                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Bool_E1",97, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // nBox_Assign_Bool_E1 ::= nBool_Types nBox_Assign_Bool_E2 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 
                                                    String val = t.toString() + b.toString();
                                                    RESULT= val;
                                                    
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Bool_E1",97, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // nBox_Assign_Bool ::= nBox_Assign_Bool_E3 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT = b;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBox_Assign_Bool",96, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // nId_E1 ::= tId tAssign tFalse 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		 
                    Node n1 = new Node("id");
                    n1.setNodeNum(parser.counter++);
                    String val = id.toString() + " = " + "false";
                    n1.setValue(val);
                    RESULT=n1;
                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nId_E1",141, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // nId_E1 ::= tId tAssign tTrue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		 
                    Node n1 = new Node("id");
                    n1.setNodeNum(parser.counter++);
                    String val = id.toString() + " = " + "true";
                    n1.setValue(val);
                    RESULT=n1;
                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nId_E1",141, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // nId_E1 ::= tId tAssign tSentence 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 
                    Node n1 = new Node("id");
                    n1.setNodeNum(parser.counter++);
                    String val = id.toString() + " = " + (i.toString().replaceAll("\"", ""));
                    n1.setValue(val);
                    RESULT=n1;
                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nId_E1",141, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // nId_E1 ::= tId tAssign tChar 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 
                    Node n1 = new Node("id");
                    n1.setNodeNum(parser.counter++);
                    String val = id.toString() + " = " + i.toString();
                    n1.setValue(val);
                    RESULT=n1;
                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nId_E1",141, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // nId_E1 ::= tId tAssign tNumberD 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 
                    Node n1 = new Node("id");
                    n1.setNodeNum(parser.counter++);
                    String val = id.toString() + " = " + i.toString();
                    n1.setValue(val);
                    RESULT=n1;
                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nId_E1",141, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // nId_E1 ::= tId tAssign tNumberI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 
                    Node n1 = new Node("id");
                    n1.setNodeNum(parser.counter++);
                    String val = id.toString() + " = " + i.toString();
                    n1.setValue(val);
                    RESULT=n1;
                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nId_E1",141, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // nId_E1 ::= tId 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 
                    Node n1 = new Node("id");
                    n1.setNodeNum(parser.counter++);
                    n1.setValue(i.toString());
                    RESULT=n1;
                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nId_E1",141, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // nId ::= nId_E1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 
                    RESULT=e;
                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nId",139, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // nIds ::= nId 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 
                RESULT=i;
                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nIds",140, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // nIds ::= nIds tComma nId 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 
                                Node n1 = new Node("ID");
                                n1.setNodeNum(parser.counter++);
                                n1.addChild((Node) i1);
                                n1.addChild((Node) i2);
                                RESULT=n1;
                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nIds",140, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // nBool_Decl ::= tBoolean nIds tEndSentence 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		 
                                                Node n1 = new Node("Declaration");
                                                Node n2 = new Node("Type");
                                                n2.setNodeNum(parser.counter++);
                                                n1.setNodeNum(parser.counter++);
                                                n2.setValue(i.toString());
                                                n1.addChild((Node) n2);
                                                n1.addChild((Node) id);
                                                RESULT=n1;
                                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBool_Decl",26, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // nWord_Decl ::= tWord nIds tEndSentence 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		 
                                                Node n1 = new Node("Declaration");
                                                Node n2 = new Node("Type");
                                                n2.setNodeNum(parser.counter++);
                                                n1.setNodeNum(parser.counter++);
                                                n2.setValue(i.toString());
                                                n1.addChild((Node) n2);
                                                n1.addChild((Node) id);
                                                RESULT=n1;
                                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nWord_Decl",14, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // nSym_Decl ::= tSymbol nIds tEndSentence 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		 
                                                Node n1 = new Node("Declaration");
                                                Node n2 = new Node("Type");
                                                n2.setNodeNum(parser.counter++);
                                                n1.setNodeNum(parser.counter++);
                                                n2.setValue(i.toString());
                                                n1.addChild((Node) n2);
                                                n1.addChild((Node) id);
                                                RESULT=n1;
                                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nSym_Decl",8, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // nDec_Decl ::= tDecimal nIds tEndSentence 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		 
                                                Node n1 = new Node("Declaration");
                                                Node n2 = new Node("Type");
                                                n2.setNodeNum(parser.counter++);
                                                n1.setNodeNum(parser.counter++);
                                                n2.setValue(i.toString());
                                                n1.addChild((Node) n2);
                                                n1.addChild((Node) id);
                                                RESULT=n1;
                                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nDec_Decl",20, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // nInt_Decl ::= tInteger nIds tEndSentence 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		 
                                                Node n1 = new Node("Declaration");
                                                Node n2 = new Node("Type");
                                                n2.setNodeNum(parser.counter++);
                                                n1.setNodeNum(parser.counter++);
                                                n2.setValue(i.toString());
                                                n1.addChild((Node) n2);
                                                n1.addChild((Node) id);
                                                RESULT=n1;
                                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nInt_Decl",2, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // nBool ::= nBool_Decl 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT=b; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nBool",25, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // nWord ::= nWord_Decl 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT=w; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nWord",13, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // nSym ::= nSym_Decl 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT=s; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nSym",7, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // nDec ::= nDec_Decl 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT=d; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nDec",19, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // nInt ::= nInt_Decl 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT=i; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nInt",1, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // nTypes ::= nBool 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT=b; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nTypes",0, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // nTypes ::= nSym 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT=s; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nTypes",0, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // nTypes ::= nWord 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT=w; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nTypes",0, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // nTypes ::= nDec 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT=d; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nTypes",0, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // nTypes ::= nInt 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT=i; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nTypes",0, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // nOutside_Repeat ::= 
            {
              Object RESULT =null;
		
                                                Node tmp = new Node("vacio");
                                                RESULT= tmp; 
                                                
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nOutside_Repeat",112, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // nOutside_Repeat ::= nOutside 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT=o; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nOutside_Repeat",112, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // nOutside ::= nVoid nOutside_Repeat 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                        String name = ((Node)r).getName(); 
                                        if(name.equals("vacio")){
                                            RESULT=v;      
                                        }else{
                                            Node tmp = new Node("Inside");
                                            tmp.addChild((Node) v);
                                            tmp.addChild((Node) r);
                                            tmp.setNodeNum(parser.counter++);
                                            RESULT= tmp;
                                        }
                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nOutside",111, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // nOutside ::= nFunc nOutside_Repeat 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                        String name = ((Node)r).getName(); 
                                        if(name.equals("vacio")){
                                            RESULT=f;      
                                        }else{
                                            Node tmp = new Node("Inside");
                                            tmp.addChild((Node) f);
                                            tmp.addChild((Node) r);
                                            tmp.setNodeNum(parser.counter++);
                                            RESULT= tmp;
                                        }
                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nOutside",111, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // nOptional ::= 
            {
              Object RESULT =null;
		
                                            Node tmp = new Node("vacio");
                                            RESULT= tmp; 
                                            
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nOptional",113, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // nOptional ::= nOutside 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		RESULT=o; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nOptional",113, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // nInside_Repeat ::= 
            {
              Object RESULT =null;
		
                                            Node tmp = new Node("vacio");
                                            RESULT= tmp; 
                                            
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nInside_Repeat",79, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // nInside_Repeat ::= nInside 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		 RESULT=i; 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nInside_Repeat",79, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // nInside ::= nCallMethod nInside_Repeat 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                    String name = ((Node)r).getName(); 
                                    if(name.equals("vacio")){
                                        RESULT=c;      
                                    }else{
                                        Node tmp = new Node("List");
                                        tmp.addChild((Node) c);
                                        tmp.addChild((Node) r);
                                        tmp.setNodeNum(parser.counter++);
                                        RESULT= tmp;
                                    } 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nInside",78, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // nInside ::= nBox nInside_Repeat 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                        String name = ((Node)r).getName(); 
                                        if(name.equals("vacio")){
                                            RESULT=b;      
                                        }else{
                                            Node tmp = new Node("Inside");
                                            tmp.addChild((Node) b);
                                            tmp.addChild((Node) r);
                                            tmp.setNodeNum(parser.counter++);
                                            RESULT= tmp;
                                        }
                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nInside",78, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // nInside ::= nSwap nInside_Repeat 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                        String name = ((Node)r).getName(); 
                                        if(name.equals("vacio")){
                                            RESULT=s;      
                                        }else{
                                            Node tmp = new Node("List");
                                            tmp.addChild((Node) s);
                                            tmp.addChild((Node) r);
                                            tmp.setNodeNum(parser.counter++);
                                            RESULT= tmp;
                                        }
                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nInside",78, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // nInside ::= nCicle nInside_Repeat 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                        String name = ((Node)r).getName(); 
                                        if(name.equals("vacio")){
                                            RESULT=c;      
                                        }else{
                                            Node tmp = new Node("List");
                                            tmp.addChild((Node) c);
                                            tmp.addChild((Node) r);
                                            tmp.setNodeNum(parser.counter++);
                                            RESULT= tmp;
                                        }
                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nInside",78, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // nInside ::= nFor nInside_Repeat 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                        String name = ((Node)r).getName(); 
                                        if(name.equals("vacio")){
                                            RESULT=f;      
                                        }else{
                                            Node tmp = new Node("Inside");
                                            tmp.addChild((Node) f);
                                            tmp.addChild((Node) r);
                                            tmp.setNodeNum(parser.counter++);
                                            RESULT= tmp;
                                        }
                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nInside",78, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // nInside ::= nIf nInside_Repeat 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                        String name = ((Node)r).getName(); 
                                        if(name.equals("vacio")){
                                            RESULT=i;      
                                        }else{
                                            Node tmp = new Node("Inside");
                                            tmp.addChild((Node) i);
                                            tmp.addChild((Node) r);
                                            tmp.setNodeNum(parser.counter++);
                                            RESULT= tmp;
                                        }
                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nInside",78, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // nInside ::= nAssignation nInside_Repeat 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                        String name = ((Node)r).getName(); 
                                        if(name.equals("vacio")){
                                            RESULT=a;      
                                        }else{
                                            Node tmp = new Node("Inside");
                                            tmp.addChild((Node) a);
                                            tmp.addChild((Node) r);
                                            tmp.setNodeNum(parser.counter++);
                                            RESULT= tmp;
                                        }
                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nInside",78, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // nInside ::= nTypes nInside_Repeat 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                        String name = ((Node)r).getName(); 
                                        if(name.equals("vacio")){
                                            RESULT=t;      
                                        }else{
                                            Node tmp = new Node("Inside");
                                            tmp.addChild((Node) t);
                                            tmp.addChild((Node) r);
                                            tmp.setNodeNum(parser.counter++);
                                            RESULT= tmp;
                                        }
                                        
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nInside",78, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // nMain ::= tMain tParOpen tParClose tInit NT$1 nInside tEnd 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		
                                                            System.out.println("---Main End---");
                                                            RESULT = i;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nMain",77, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-6)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
System.out.println("---Main Begin---");
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("NT$1",144, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // nCometMach ::= error NT$0 nMain nOptional 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-2)).value;

              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nCometMach",138, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-3)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
parser.report_error("Error en la sintaxis","Error"); 
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("NT$0",143, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // nCometMach ::= nMain nOptional 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.peek()).value;
		
                                    String name = ((Node)o).getName(); 
                                        if(name.equals("vacio")){
                                            Node tmp = new Node("Main");
                                            tmp.addChild((Node) m);
                                            tmp.setNodeNum(parser.counter++);
                                            parser.root = (Node) tmp;
                                            System.out.println("Document OK");
                                            RESULT=tmp; 
                                        }else{
                                            Node tmp = new Node("CometMach");
                                            Node tmp1 = new Node("Main");
                                            Node tmp2 = new Node("Optional");
                                            tmp1.setNodeNum(parser.counter++);
                                            tmp2.setNodeNum(parser.counter++);
                                            tmp.setNodeNum(parser.counter++);
                                            tmp.addChild((Node) m);
                                            tmp.addChild((Node) o);
                                            parser.root = (Node) tmp;
                                            System.out.println("Document OK");
                                            RESULT=tmp;
                                        }
                                             
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("nCometMach",138, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          return CUP$CometMachParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= nCometMach EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)).value;
		RESULT = start_val;
              CUP$CometMachParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.elementAt(CUP$CometMachParser$top-1)), ((java_cup.runtime.Symbol)CUP$CometMachParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CometMachParser$parser.done_parsing();
          return CUP$CometMachParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

