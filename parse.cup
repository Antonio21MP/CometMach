package cometmach;
import java_cup.runtime.*;


terminal tTrue, tFalse, tIf, tAssign, tOr, tAnd, tComparative, tElseif, tElse, tSwap, tIs;
terminal tThen, tClose, tDefault, tFor, tParOpen, tParClose, tTo, tEnd, tMain;
terminal tCicle, tBox, tBoxAssing, tFunction, tVoid, tReturn, tCommentary;
terminal tInit, tInteger, tDecimal, tWord,  tSymbol, tBoolean;
terminal tId, tStapleOpen, tStapleClose, tComma, tAdd, tSub, tMulti, tDiv, tEndSentence;
terminal String tSentence, tNumberI, tNumberD, tChar;

non terminal nTypes;
non terminal nInt, nInt_Declaration_Mixed, nInt_Declaration_Mixed_E1, nInt_Declaration_Mixed_E2,
             nInt_Declaration_Mixed_E3, nInt_Declaration_Mixed_E4;
non terminal nSym, nSym_Declaration_Mixed, nSym_Declaration_Mixed_E1, nSym_Declaration_Mixed_E2,
             nSym_Declaration_Mixed_E3, nSym_Declaration_Mixed_E4;
non terminal nWord, nWord_Declaration_Mixed, nWord_Declaration_Mixed_E1, nWord_Declaration_Mixed_E2,
             nWord_Declaration_Mixed_E3, nWord_Declaration_Mixed_E4;
non terminal nDec, nDec_Declaration_Mixed, nDec_Declaration_Mixed_E1, nDec_Declaration_Mixed_E2,
             nDec_Declaration_Mixed_E3, nDec_Declaration_Mixed_E4;
non terminal nBool, nBool_Declaration_Mixed, nBool_Declaration_Mixed_E1, nBool_Declaration_Mixed_E2,
             nBool_Declaration_Mixed_E3, nBool_Declaration_Mixed_E4, nBool_Declaration_Mixed_E5;
non terminal nAssignation, nAssignation_E1, nAssignation_E2;
non terminal nOperations, nOperations_E1,nOperations_E2,nOperations_E3;
non terminal nSentences, nSentences_E1, nCompObjects;
non terminal nLogicalOpe;
non terminal nForSentence, nForSentence_E1;
non terminal nForObjectOptions;
non terminal nInsideComp, nInsideComp_E1; 
non terminal nIf, nIf_E1, nIf_E2, nInside_If;
non terminal nList_DI, nList_DI_Repeat;
non terminal nFor, nFor_E1, nFor_E2, nInside_For;
non terminal nCicle, nCicle_E2, nCicle_E3, nInside_Cicle;
non terminal nSwap, nSwap_E1, nSwap_E2, nInside_Swap;
non terminal nIs, nIs_E1, nIs_E2, nObject_Is, nInside_Is;
non terminal nDefault, nDefault_E1, nInside_Default;
non terminal nList_Is, nList_Is_Repeat;
non terminal nMain, nInside, nInside_Repeat;
non terminal nBox, nBox_E1, nBox_E2, nBox_EB, nBox_EI, nBox_ED, nBox_EW, nBox_ES;
non terminal nBox_Assign_Int, nBox_Assign_Int_E1, nBox_Assign_Int_E2, nBox_Assign_Int_E3; 
non terminal nBox_Assign_Dec, nBox_Assign_Dec_E1, nBox_Assign_Dec_E2, nBox_Assign_Dec_E3; 
non terminal nBox_Assign_Bool, nBox_Assign_Bool_E1, nBox_Assign_Bool_E2, nBox_Assign_Bool_E3, nBool_Types;
non terminal nBox_Assign_Word, nBox_Assign_Word_E1, nBox_Assign_Word_E2, nBox_Assign_Word_E3; 
non terminal nBox_Assign_Sym, nBox_Assign_Sym_E1, nBox_Assign_Sym_E2, nBox_Assign_Sym_E3;
non terminal nVal_Box, nBox_Assign;
precedence left tAdd, tSub;
precedence left tMulti, tDiv;

start with nMain;

nMain ::= tMain tParOpen tParClose tInit 
{:System.out.println("---Main Begin---");:} nInside tEnd {:System.out.println("---Main End---");:};

nInside ::= nTypes nInside_Repeat 
            | nAssignation nInside_Repeat 
            | nIf nInside_Repeat 
            | nFor nInside_Repeat
            | nCicle nInside_Repeat
            | nSwap nInside_Repeat
            | nBox nInside_Repeat;

nTypes ::= nInt 
            | nDec 
            | nWord  
            | nSym 
            | nBool;
nInside_Repeat ::= nInside | ;

nInt ::= nInt_Declaration_Mixed;
nDec ::= nDec_Declaration_Mixed;
nSym ::= nSym_Declaration_Mixed;
nWord ::= nWord_Declaration_Mixed;
nBool ::= nBool_Declaration_Mixed;
//Declaracion de int para ambos casos.
nInt_Declaration_Mixed ::= nInt_Declaration_Mixed_E4;
nInt_Declaration_Mixed_E1 ::= tComma nInt_Declaration_Mixed_E3
                                | tEndSentence ;
nInt_Declaration_Mixed_E2 ::= tAssign tNumberI nInt_Declaration_Mixed_E1 
                                | nInt_Declaration_Mixed_E1;
nInt_Declaration_Mixed_E3 ::=  tId nInt_Declaration_Mixed_E2;
nInt_Declaration_Mixed_E4 ::= tInteger nInt_Declaration_Mixed_E3 ;

//Declaracion de dec para ambos casos.
nDec_Declaration_Mixed ::= nDec_Declaration_Mixed_E4 ;
nDec_Declaration_Mixed_E1 ::= tComma nDec_Declaration_Mixed_E3 
                                | tEndSentence ;
nDec_Declaration_Mixed_E2 ::= tAssign tNumberD nDec_Declaration_Mixed_E1  
                                | nDec_Declaration_Mixed_E1;
nDec_Declaration_Mixed_E3 ::=  tId nDec_Declaration_Mixed_E2;
nDec_Declaration_Mixed_E4 ::= tDecimal nDec_Declaration_Mixed_E3;

//Declaracion de sym para ambos casos.
nSym_Declaration_Mixed ::= nSym_Declaration_Mixed_E4;
nSym_Declaration_Mixed_E1 ::= tComma nSym_Declaration_Mixed_E3
                                | tEndSentence ;
nSym_Declaration_Mixed_E2 ::= tAssign tChar nSym_Declaration_Mixed_E1 
                                | nSym_Declaration_Mixed_E1;
nSym_Declaration_Mixed_E3 ::=  tId nSym_Declaration_Mixed_E2;
nSym_Declaration_Mixed_E4 ::= tSymbol nSym_Declaration_Mixed_E3 ;

//Declaracion de word para ambos casos.
nWord_Declaration_Mixed ::= nWord_Declaration_Mixed_E4;
nWord_Declaration_Mixed_E1 ::= tComma nWord_Declaration_Mixed_E3
                                | tEndSentence ;
nWord_Declaration_Mixed_E2 ::= tAssign tSentence nWord_Declaration_Mixed_E1 
                                | nWord_Declaration_Mixed_E1;
nWord_Declaration_Mixed_E3 ::=  tId nWord_Declaration_Mixed_E2;
nWord_Declaration_Mixed_E4 ::= tWord nWord_Declaration_Mixed_E3;

//Declaracion de bool para ambos casos.
nBool_Declaration_Mixed ::= nBool_Declaration_Mixed_E5;
nBool_Declaration_Mixed_E1 ::= tComma nBool_Declaration_Mixed_E4
                                | tEndSentence ;
nBool_Declaration_Mixed_E2 ::= tTrue nBool_Declaration_Mixed_E1 
                                | tFalse nBool_Declaration_Mixed_E1;
nBool_Declaration_Mixed_E3 ::= tAssign nBool_Declaration_Mixed_E2  
                                | nBool_Declaration_Mixed_E1;
nBool_Declaration_Mixed_E4 ::=  tId nBool_Declaration_Mixed_E3;
nBool_Declaration_Mixed_E5 ::= tBoolean nBool_Declaration_Mixed_E4;

//Asignaciones de tipos de Box
//Asignaciones box bool 
nBox_Assign_Bool ::= nBox_Assign_Bool_E3;
nBox_Assign_Bool_E1 ::= nBool_Types nBox_Assign_Bool_E2
                        | nBool_Types;
nBox_Assign_Bool_E2 ::= tComma nBox_Assign_Bool_E1;
nBox_Assign_Bool_E3 ::= nBool_Types nBox_Assign_Bool_E2;

//Asignaciones box int
nBox_Assign_Int ::= nBox_Assign_Int_E3;
nBox_Assign_Int_E1 ::=tNumberI nBox_Assign_Int_E2
                        | tNumberI;
nBox_Assign_Int_E2 ::= tComma nBox_Assign_Int_E1;
nBox_Assign_Int_E3 ::=tNumberI nBox_Assign_Int_E2;

//Asignaciones box dec
nBox_Assign_Dec ::= nBox_Assign_Dec_E3;
nBox_Assign_Dec_E1 ::=tNumberD nBox_Assign_Dec_E2
                        | tNumberD;
nBox_Assign_Dec_E2 ::= tComma nBox_Assign_Dec_E1;
nBox_Assign_Dec_E3 ::=tNumberD nBox_Assign_Dec_E2;

//Asignaciones box int
nBox_Assign_Word ::= nBox_Assign_Word_E3;
nBox_Assign_Word_E1 ::=tSentence nBox_Assign_Word_E2
                        | tSentence;
nBox_Assign_Word_E2 ::= tComma nBox_Assign_Word_E1;
nBox_Assign_Word_E3 ::=tSentence nBox_Assign_Word_E2;

//Asignaciones box int
nBox_Assign_Sym ::= nBox_Assign_Sym_E3;
nBox_Assign_Sym_E1 ::=tChar nBox_Assign_Sym_E2
                        | tChar;
nBox_Assign_Sym_E2 ::= tComma nBox_Assign_Sym_E1;
nBox_Assign_Sym_E3 ::=tChar nBox_Assign_Sym_E2;


//valores de bool
nBool_Types ::= tTrue
                |tFalse;

//Objetos dentro de los corchetes de box
nVal_Box ::= tNumberI
                |tId;
//Declaracion de Box
nBox ::= nBox_E2;
nBox_EB ::= tParOpen nVal_Box tParClose tEndSentence
            | tBoxAssing tParOpen nBox_Assign_Bool tParClose tEndSentence;
nBox_EI ::= tParOpen nVal_Box tParClose tEndSentence
            | tBoxAssing tParOpen nBox_Assign_Int tParClose tEndSentence;
nBox_ED ::= tParOpen nVal_Box tParClose tEndSentence
            | tBoxAssing tParOpen nBox_Assign_Dec tParClose tEndSentence;
nBox_ES ::= tParOpen nVal_Box tParClose tEndSentence
            | tBoxAssing tParOpen nBox_Assign_Sym tParClose tEndSentence;
nBox_EW ::= tParOpen nVal_Box tParClose tEndSentence
            | tBoxAssing tParOpen nBox_Assign_Word tParClose tEndSentence;
nBox_E1 ::= tBoolean tId nBox_EB
            | tInteger tId nBox_EI
            | tDecimal tId nBox_ED
            | tSymbol tId nBox_ES
            | tWord tId nBox_EW;
nBox_E2 ::= tBox nBox_E1;

//Asignacion de box despues de declarado
nBox_Assign ::= tNumberI tEndSentence
                | tTrue tEndSentence
                | tChar tEndSentence
                | tSentence tEndSentence
                | tFalse tEndSentence
                | tNumberD tEndSentence;
//Asignacion de cualquiera tipo
nAssignation ::= nAssignation_E2;
nAssignation_E1 ::= nOperations tEndSentence
                    | tChar tEndSentence
                    | tTrue tEndSentence
                    | tFalse tEndSentence
                    | tSentence tEndSentence;
nAssignation_E2 ::= tId tAssign nAssignation_E1
                    | tId tParOpen nVal_Box tParClose tAssign nBox_Assign;
//Operaciones
nOperations ::= nOperations_E3;
nOperations_E1 ::= tId 
                    | tNumberI 
                    | tNumberD
                    |tParOpen nOperations_E3 tParClose;
nOperations_E2 ::= nOperations_E2 tMulti nOperations_E1
                    | nOperations_E2 tDiv nOperations_E1
                    | nOperations_E1;
nOperations_E3 ::= nOperations_E3 tAdd nOperations_E2 
                    | nOperations_E3 tSub nOperations_E2
                    | nOperations_E2;

//Sentencias de operaciones dentro del if y cicle
nSentences ::= nSentences_E1;
nSentences_E1 ::=nCompObjects tComparative nCompObjects;

//Operadores Logicos
nLogicalOpe ::= tAnd 
                | tOr;
//Sentencias usadas en varios lugares
nCompObjects ::= tId 
                |tNumberI
                |tNumberD
                |tTrue
                |tFalse;
//Sentencias para ejecutar ors y ands divididos por parentesis
nInsideComp ::= nInsideComp_E1;
nInsideComp_E1 ::= nSentences nLogicalOpe nInsideComp_E1
                    | nSentences; 

nList_DI ::= nIf nList_DI_Repeat
            | nTypes nList_DI_Repeat
            | nAssignation nList_DI_Repeat
            | nFor nList_DI_Repeat
            | nCicle nList_DI_Repeat
            | nSwap nList_DI_Repeat
            | nBox nList_DI_Repeat;

nList_DI_Repeat ::= nList_DI | ;
//Gramatica de if
nIf ::= nIf_E2;
nInside_If ::= tInit nList_DI tEnd
                |tInit nList_DI tEnd tElse tInit nList_DI tEnd;
nIf_E1 ::= tParOpen nInsideComp tParClose nInside_If;
nIf_E2 ::= tIf nIf_E1;

//Sentencias para operaciones dentro del for
nForSentence ::= nForSentence_E1;
nForSentence_E1 ::= nForObjectOptions tTo nForObjectOptions tEndSentence tId;

//Objetos usados dentro de la operacion del for
nForObjectOptions ::= tNumberD
                        |tNumberI
                        |tId;
//Gramatica de for
nFor ::= nFor_E2;
nInside_For ::= tInit nList_DI tEnd;
nFor_E1 ::= tParOpen nForSentence tParClose nInside_For; 
nFor_E2 ::= tFor nFor_E1;

//Gramatica de cicle
nCicle ::= nCicle_E3;
nInside_Cicle ::= tInit nList_DI tEnd;
nCicle_E3 ::= nSentences 
                |tTrue;
nCicle_E2 ::= tParOpen nSentences tParClose nInside_Cicle;
nCicle_E3 ::= tCicle nCicle_E2;

//Objetos usados para is
nObject_Is ::= tNumberI
                | tChar;

//Gramatica de is
nIs ::= nIs_E2;
nInside_Is ::= tInit nList_DI tEnd;
nIs_E1 ::= tParOpen nObject_Is tParClose nInside_Is;
nIs_E2 ::= tIs nIs_E1;

//Repeticion de gramatica de is
nList_Is ::= nIs nList_Is_Repeat;
nList_Is_Repeat ::= nList_Is | ;

//Gramatica de default
nDefault ::= nDefault_E1;
nInside_Default ::= tInit nList_DI tEnd;
nDefault_E1 ::= tDefault nInside_Default;

//Gramatica de swap
nSwap ::= nSwap_E2;
nInside_Swap ::= tInit nList_Is nDefault tEnd;
nSwap_E1 ::= tParOpen tId tParClose nInside_Swap; 
nSwap_E2 ::= tSwap nSwap_E1;