package cometmach;
import java_cup.runtime.*;

parser code
{:
    public String result = "";
    public Node root;
    public int counter = 1;
    public void syntax_error(Symbol s){
		report_error("ERROR DE SINTAXIS -- Columna: " + s.right + " Fila: " + s.left + ". En: \"" + s.value + "\"", null);
	}
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception 
    {
        //report_fatal_error("Fatal Error: " + s.value, null);
    }

:}

terminal tTrue, tFalse, tIf, tAssign, tOr, tAnd, tComparative, tElseif, tElse, tSwap, tIs;
terminal tThen, tClose, tDefault, tFor, tParOpen, tParClose, tTo, tEnd, tMain;
terminal tCicle, tBox, tBoxAssing, tFunction, tVoid, tReturn, tCommentary;
terminal tInit, tInteger, tDecimal, tWord,  tSymbol, tBoolean;
terminal tId, tStapleOpen, tStapleClose, tComma, tAdd, tSub, tMulti, tDiv, tEndSentence;
terminal String tSentence, tNumberI, tNumberD, tChar;

non terminal nTypes;
non terminal nInt, nInt_Decl, nInt_Decl_E1, nInt_Decl_E2, nInt_Decl_E3, nInt_Decl_E4;
non terminal nSym, nSym_Decl, nSym_Decl_E1, nSym_Decl_E2, nSym_Decl_E3, nSym_Decl_E4;
non terminal nWord, nWord_Decl, nWord_Decl_E1, nWord_Decl_E2,
             nWord_Decl_E3, nWord_Decl_E4;
non terminal nDec, nDec_Decl, nDec_Decl_E1, nDec_Decl_E2,
             nDec_Decl_E3, nDec_Decl_E4;
non terminal nBool, nBool_Decl, nBool_Decl_E1, nBool_Decl_E2,
             nBool_Decl_E3, nBool_Decl_E4, nBool_Decl_E5;
non terminal nAssignation, nAssignation_E1, nAssignation_E2;
non terminal nOperations, nOperations_E1,nOperations_E2,nOperations_E3;
non terminal nSentences, nSentences_E1, nCompObjects;
non terminal nLogicalOpe;
non terminal nForSentence, nForSentence_E1;
non terminal nForObjectOptions;
non terminal nInsideComp, nInsideComp_E1; 
non terminal nIf, nIf_E1, nIf_E2, nInside_If;
non terminal nList_DI, nList_DI_Repeat;
non terminal nFor, nFor_E1, nFor_E2, nInside_For;
non terminal nCicle, nCicle_E2, nCicle_E3, nInside_Cicle;
non terminal nSwap, nSwap_E1, nSwap_E2, nInside_Swap;
non terminal nIs, nIs_E1, nIs_E2, nObject_Is, nInside_Is;
non terminal nDefault, nDefault_E1, nInside_Default;
non terminal nList_Is, nList_Is_Repeat;
non terminal nMain, nInside, nInside_Repeat;
non terminal nBox, nBox_E1, nBox_E2, nBox_EB, nBox_EI, nBox_ED, nBox_EW, nBox_ES;
non terminal nBox_Assign_Int, nBox_Assign_Int_E1, nBox_Assign_Int_E2, nBox_Assign_Int_E3; 
non terminal nBox_Assign_Dec, nBox_Assign_Dec_E1, nBox_Assign_Dec_E2, nBox_Assign_Dec_E3; 
non terminal nBox_Assign_Bool, nBox_Assign_Bool_E1, nBox_Assign_Bool_E2, nBox_Assign_Bool_E3, nBool_Types;
non terminal nBox_Assign_Word, nBox_Assign_Word_E1, nBox_Assign_Word_E2, nBox_Assign_Word_E3; 
non terminal nBox_Assign_Sym, nBox_Assign_Sym_E1, nBox_Assign_Sym_E2, nBox_Assign_Sym_E3;
non terminal nVal_Box, nBox_Assign;
non terminal nOutside, nOutside_Repeat, nOptional;
non terminal nFunc, nFunc_E1, nFunc_E2, nInside_Func, nList_Func, nList_Func_Repeat, nReturn;
non terminal nVoid, nVoid_E1, nVoid_E2, nInside_Void;
non terminal nParam, nParam_E1, nParam_E2, nParam_E3, nVP_Types;
non terminal nCallMethod, nCallMethod_E1, nCallMethod_E2; 
non terminal nAssign_Method, nAssign_Method_E1, nAssign_Method_E2, nAssign_Method_E3;
non terminal nParam_Value;
non terminal nCommetary;
non terminal nCometMach;
non terminal nId, nIds, nId_E1, nId_E2;
precedence left tAdd, tSub;
precedence left tMulti, tDiv;
precedence left tAnd, tOr;
start with nCometMach;

nCometMach ::= nMain:m nOptional {:
                                    Node tmp = new Node("Main");
                                    tmp.addChild((Node) m);
                                    tmp.setNodeNum(parser.counter++);
                                    parser.root = (Node) tmp;
                                    System.out.println("Document OK");
                                    RESULT=tmp;
                                    :};

nMain ::= tMain tParOpen tParClose tInit 
{:System.out.println("---Main Begin---");:} nInside:i tEnd {:
                                                            System.out.println("---Main End---");
                                                            RESULT = i;:};
//Repeticion dentro del main
nInside ::= nTypes:t nInside_Repeat:r  {:
                                        String name = ((Node)r).getName(); 
                                        if(name.equals("vacio")){
                                            RESULT=t;      
                                        }else{
                                            Node tmp = new Node("Inside");
                                            tmp.addChild((Node) t);
                                            tmp.addChild((Node) r);
                                            tmp.setNodeNum(parser.counter++);
                                            RESULT= tmp;
                                        }
                                        :} 
            | nAssignation nInside_Repeat 
            | nIf nInside_Repeat 
            | nFor nInside_Repeat
            | nCicle nInside_Repeat
            | nSwap nInside_Repeat
            | nBox:b nInside_Repeat:r {:
                                        String name = ((Node)r).getName(); 
                                        if(name.equals("vacio")){
                                            RESULT=b;      
                                        }else{
                                            Node tmp = new Node("Inside");
                                            tmp.addChild((Node) b);
                                            tmp.addChild((Node) r);
                                            tmp.setNodeNum(parser.counter++);
                                            RESULT= tmp;
                                        }
                                        :}
            | nCallMethod nInside_Repeat
            | nCommetary nInside_Repeat
            ;

nInside_Repeat ::= nInside:i {: RESULT=i; :} | {:
                                                Node tmp = new Node("vacio");
                                                RESULT= tmp; 
                                                :};
//Repeticion fuera del main
nOptional ::= nOutside | ;
nOutside ::= nFunc nOutside_Repeat
            |nVoid nOutside_Repeat
            |nTypes:t {: RESULT=t; :} nOutside_Repeat
            |nAssignation nOutside_Repeat
            | nCommetary nOutside_Repeat;

nOutside_Repeat ::= nOutside | ;

nTypes ::= nInt:i {: RESULT=i; :} 
            | nDec:d {: RESULT=d; :}
            | nWord:w {: RESULT=w; :}  
            | nSym:s {: RESULT=s; :} 
            | nBool:b {: RESULT=b; :};

nCommetary ::= tCommentary;

nInt ::= nInt_Decl:i {: RESULT=i; :};
nDec ::= nDec_Decl:d {: RESULT=d; :};
nSym ::= nSym_Decl:s {: RESULT=s; :};
nWord ::= nWord_Decl:w {: RESULT=w; :};
nBool ::= nBool_Decl:b {: RESULT=b; :};
//Declaracion de int para ambos casos.
nInt_Decl ::= tInteger:i nIds:id tEndSentence {: 
                                                Node n1 = new Node("Declaration");
                                                Node n2 = new Node("Type");
                                                n2.setNodeNum(parser.counter++);
                                                n1.setNodeNum(parser.counter++);
                                                n2.setValue(i.toString());
                                                n1.addChild((Node) n2);
                                                n1.addChild((Node) id);
                                                RESULT=n1;
                                                :};

nDec_Decl ::= tDecimal:i nIds:id tEndSentence {: 
                                                Node n1 = new Node("Declaration");
                                                Node n2 = new Node("Type");
                                                n2.setNodeNum(parser.counter++);
                                                n1.setNodeNum(parser.counter++);
                                                n2.setValue(i.toString());
                                                n1.addChild((Node) n2);
                                                n1.addChild((Node) id);
                                                RESULT=n1;
                                                :};

nSym_Decl ::= tSymbol:i nIds:id tEndSentence {: 
                                                Node n1 = new Node("Declaration");
                                                Node n2 = new Node("Type");
                                                n2.setNodeNum(parser.counter++);
                                                n1.setNodeNum(parser.counter++);
                                                n2.setValue(i.toString());
                                                n1.addChild((Node) n2);
                                                n1.addChild((Node) id);
                                                RESULT=n1;
                                                :};

nWord_Decl ::= tWord:i nIds:id tEndSentence {: 
                                                Node n1 = new Node("Declaration");
                                                Node n2 = new Node("Type");
                                                n2.setNodeNum(parser.counter++);
                                                n1.setNodeNum(parser.counter++);
                                                n2.setValue(i.toString());
                                                n1.addChild((Node) n2);
                                                n1.addChild((Node) id);
                                                RESULT=n1;
                                                :};
nBool_Decl ::= tBoolean:i nIds:id tEndSentence {: 
                                                Node n1 = new Node("Declaration");
                                                Node n2 = new Node("Type");
                                                n2.setNodeNum(parser.counter++);
                                                n1.setNodeNum(parser.counter++);
                                                n2.setValue(i.toString());
                                                n1.addChild((Node) n2);
                                                n1.addChild((Node) id);
                                                RESULT=n1;
                                                :};

nIds ::= nIds:i1 tComma nId:i2 {: 
                                Node n1 = new Node("ID");
                                n1.setNodeNum(parser.counter++);
                                n1.addChild((Node) i1);
                                n1.addChild((Node) i2);
                                RESULT=n1;
                                :}
        |nId:i {: 
                RESULT=i;
                :};

nId ::= nId_E1:e {: 
                    RESULT=e;
                :};

nId_E1 ::= tId:i {: 
                    Node n1 = new Node("id");
                    n1.setNodeNum(parser.counter++);
                    n1.setValue(i.toString());
                    RESULT=n1;
                :} 
        |tId:id tAssign tNumberI:i {: 
                    Node n1 = new Node("id");
                    n1.setNodeNum(parser.counter++);
                    String val = id.toString() + " = " + i.toString();
                    n1.setValue(val);
                    RESULT=n1;
                :}
        |tId:id tAssign tNumberD:i {: 
                    Node n1 = new Node("id");
                    n1.setNodeNum(parser.counter++);
                    String val = id.toString() + " = " + i.toString();
                    n1.setValue(val);
                    RESULT=n1;
                :}
        |tId:id tAssign tChar:i {: 
                    Node n1 = new Node("id");
                    n1.setNodeNum(parser.counter++);
                    String val = id.toString() + " = " + i.toString();
                    n1.setValue(val);
                    RESULT=n1;
                :}
        |tId:id tAssign tSentence:i {: 
                    Node n1 = new Node("id");
                    n1.setNodeNum(parser.counter++);
                    String val = id.toString() + " = " + (i.toString().replaceAll("\"", ""));
                    n1.setValue(val);
                    RESULT=n1;
                :}
        |tId:id tAssign tTrue {: 
                    Node n1 = new Node("id");
                    n1.setNodeNum(parser.counter++);
                    String val = id.toString() + " = " + "true";
                    n1.setValue(val);
                    RESULT=n1;
                :}
        |tId:id tAssign tFalse {: 
                    Node n1 = new Node("id");
                    n1.setNodeNum(parser.counter++);
                    String val = id.toString() + " = " + "false";
                    n1.setValue(val);
                    RESULT=n1;
                :};
//Asignacion de box bool
nBox_Assign_Bool ::= nBox_Assign_Bool_E3:b {:RESULT = b;:};
nBox_Assign_Bool_E1 ::= nBool_Types:t nBox_Assign_Bool_E2:b {: 
                                                    String val = t.toString() + b.toString();
                                                    RESULT= val;
                                                    :} 
                        | nBool_Types:t {: 
                                        String val = t.toString();
                                        RESULT= val;
                                        :};
nBox_Assign_Bool_E2 ::= tComma:c nBox_Assign_Bool_E1:b {: 
                                                    String val = c.toString() + b.toString();
                                                    RESULT= val;
                                                    :};
nBox_Assign_Bool_E3 ::= nBool_Types:t nBox_Assign_Bool_E2:b {:
                                                         String val = t.toString() + b.toString();
                                                         RESULT = val;
                                                         :};

//Asignaciones box int
nBox_Assign_Int ::= nBox_Assign_Int_E3:i {:RESULT = i;:};
nBox_Assign_Int_E1 ::=tNumberI:n nBox_Assign_Int_E2:i {: 
                                                    String val = n.toString() + i.toString();
                                                    RESULT= val;
                                                    :} 
                        | tNumberI:n {: 
                                        String val = n.toString();
                                        RESULT= val;
                                        :};
nBox_Assign_Int_E2 ::= tComma:c nBox_Assign_Int_E1:i {: 
                                                    String val = c.toString() + i.toString();
                                                    RESULT= val;
                                                    :};
nBox_Assign_Int_E3 ::=tNumberI:n nBox_Assign_Int_E2:i {:
                                                         String val = n.toString() + i.toString();
                                                         RESULT = val;
                                                         :};

//Asignaciones box dec
nBox_Assign_Dec ::= nBox_Assign_Dec_E3:d {:RESULT = d;:};
nBox_Assign_Dec_E1 ::=tNumberD:n nBox_Assign_Dec_E2:d {: 
                                                    String val = n.toString() + d.toString();
                                                    RESULT= val;
                                                    :}
                        | tNumberD:n {:  
                                    String val = n.toString();
                                    RESULT= val;
                                    :};
nBox_Assign_Dec_E2 ::= tComma:c nBox_Assign_Dec_E1:d{: 
                                                String val = c.toString() + d.toString();
                                                RESULT= val;
                                                :};
nBox_Assign_Dec_E3 ::=tNumberD:n nBox_Assign_Dec_E2:d {:
                                                String val = n.toString() + d.toString();
                                                RESULT = val;
                                                :};

//Asignaciones box word
nBox_Assign_Word ::= nBox_Assign_Word_E3:w {:RESULT = w;:};
nBox_Assign_Word_E1 ::=tSentence:s nBox_Assign_Word_E2:w {: 
                                                    String val = (s.toString().replaceAll("\"", "")) + w.toString();
                                                    RESULT= val;
                                                    :}
                        | tSentence:s {:  
                                    String val = s.toString().replaceAll("\"", "");
                                    RESULT= val;
                                    :};
nBox_Assign_Word_E2 ::= tComma:c nBox_Assign_Word_E1:w {: 
                                                String val = c.toString() + w.toString();
                                                RESULT= val;
                                                :};
nBox_Assign_Word_E3 ::=tSentence:s nBox_Assign_Word_E2:w {:
                                                String val = (s.toString().replaceAll("\"", "")) + w.toString();
                                                RESULT = val;
                                                :};

//Asignaciones box symbol;
nBox_Assign_Sym ::= nBox_Assign_Sym_E3:s {:RESULT = s;:};
nBox_Assign_Sym_E1 ::=tChar:c nBox_Assign_Sym_E2:s {: 
                                                    String val = c.toString() + s.toString();
                                                    RESULT= val;
                                                    :}
                        | tChar:c {:  
                                    String val = c.toString();
                                    RESULT= val;
                                    :};
nBox_Assign_Sym_E2 ::= tComma:c nBox_Assign_Sym_E1:s {: 
                                                String val = c.toString() + s.toString();
                                                RESULT= val;
                                                :};
nBox_Assign_Sym_E3 ::=tChar:c nBox_Assign_Sym_E2:s {:
                                                String val = c.toString() + s.toString();
                                                RESULT = val;
                                                :};


//valores de bool
nBool_Types ::= tTrue:t {: RESULT=t; :}
                |tFalse:f {: RESULT=f; :};

//Objetos dentro de los corchetes de box
nVal_Box ::= tNumberI:n {: RESULT=n; :}
                |tId:i {: RESULT=i; :};
//Declaracion de Box
nBox ::= nBox_E2:b {: RESULT=b; :};

nBox_EB ::= tParOpen:po nVal_Box:v tParClose:pc tEndSentence {:
                                                    String val = po.toString() + v.toString() + pc.toString();
                                                    RESULT=val; 
                                                    :}
            | tBoxAssing:a tParOpen:po nBox_Assign_Bool:ab tParClose:pc tEndSentence {:
                                                    String val = a.toString() + po.toString() 
                                                                + ab.toString() + pc.toString();
                                                    System.out.println(val);
                                                    RESULT=val; 
                                                    :};
nBox_EI ::= tParOpen:po nVal_Box:v tParClose:pc tEndSentence {:
                                                    String val = po.toString() + v.toString() + pc.toString();
                                                    RESULT=val; 
                                                    :}
            | tBoxAssing:a tParOpen:po nBox_Assign_Int:ai tParClose:pc tEndSentence {:
                                                    String val = a.toString() + po.toString() 
                                                                + ai.toString() + pc.toString();
                                                    System.out.println(val);
                                                    RESULT=val; 
                                                    :};

nBox_ED ::= tParOpen:po nVal_Box:v tParClose:pc tEndSentence {:
                                                    String val = po.toString() + v.toString() + pc.toString();
                                                    RESULT=val; 
                                                    :}
            | tBoxAssing:a tParOpen:po nBox_Assign_Dec:ad tParClose:pc tEndSentence {:
                                                    String val = a.toString() + po.toString() 
                                                                + ad.toString() + pc.toString();
                                                    System.out.println(val);
                                                    RESULT=val; 
                                                    :};
//por aqui vas cabron
nBox_ES ::= tParOpen:po nVal_Box:v tParClose:pc tEndSentence {:
                                                    String val = po.toString() + v.toString() + pc.toString();
                                                    RESULT=val; 
                                                    :}
            | tBoxAssing:a tParOpen:po nBox_Assign_Sym:as tParClose:pc tEndSentence {:
                                                    String val = a.toString() + po.toString() 
                                                                + as.toString() + pc.toString();
                                                    System.out.println(val);
                                                    RESULT=val; 
                                                    :};

nBox_EW ::= tParOpen:po nVal_Box:v tParClose:pc tEndSentence {:
                                                    String val = po.toString() + v.toString() + pc.toString();
                                                    RESULT=val; 
                                                    :}
            | tBoxAssing:a tParOpen:po nBox_Assign_Word:aw tParClose:pc tEndSentence {:
                                                    String val = a.toString() + po.toString() 
                                                                + aw.toString() + pc.toString();
                                                    System.out.println(val);
                                                    RESULT=val; 
                                                    :};

nBox_E1 ::= tBoolean:b tId:i nBox_EB:be {:
                                Node n = new Node("Box_Declaration");
                                Node n1 = new Node("Box_Type");
                                Node n2 = new Node("Box_ID");
                                n1.setNodeNum(parser.counter++);
                                n2.setNodeNum(parser.counter++);
                                n.setNodeNum(parser.counter++);
                                String val = i.toString() + be.toString();
                                n1.setValue(b.toString());
                                n2.setValue(val);
                                n.addChild((Node)n1);
                                n.addChild((Node)n2);        
                                RESULT=n; 
                                :}
            | tInteger:in tId:i nBox_EI:ie {:
                                Node n = new Node("Box_Declaration");
                                Node n1 = new Node("Box_Type");
                                Node n2 = new Node("Box_ID");
                                n1.setNodeNum(parser.counter++);
                                n2.setNodeNum(parser.counter++);
                                n.setNodeNum(parser.counter++);
                                String val = i.toString() + ie.toString();
                                n1.setValue(in.toString());
                                n2.setValue(val);
                                n.addChild((Node)n1);
                                n.addChild((Node)n2);        
                                RESULT=n; 
                                :} 
            | tDecimal:d tId:i nBox_ED:de {:
                                Node n = new Node("Box_Declaration");
                                Node n1 = new Node("Box_Type");
                                Node n2 = new Node("Box_ID");
                                n1.setNodeNum(parser.counter++);
                                n2.setNodeNum(parser.counter++);
                                n.setNodeNum(parser.counter++);
                                String val = i.toString() + de.toString();
                                n1.setValue(d.toString());
                                n2.setValue(val);
                                n.addChild((Node)n1);
                                n.addChild((Node)n2);        
                                RESULT=n; 
                                :} 
            | tSymbol:s tId:i nBox_ES:se {:
                                Node n = new Node("Box_Declaration");
                                Node n1 = new Node("Box_Type");
                                Node n2 = new Node("Box_ID");
                                n1.setNodeNum(parser.counter++);
                                n2.setNodeNum(parser.counter++);
                                n.setNodeNum(parser.counter++);
                                String val = i.toString() + se.toString();
                                n1.setValue(s.toString());
                                n2.setValue(val);
                                n.addChild((Node)n1);
                                n.addChild((Node)n2);        
                                RESULT=n; 
                                :} 
            | tWord:w tId:i nBox_EW:we {:
                                Node n = new Node("Box_Declaration");
                                Node n1 = new Node("Box_Type");
                                Node n2 = new Node("Box_ID");
                                n1.setNodeNum(parser.counter++);
                                n2.setNodeNum(parser.counter++);
                                n.setNodeNum(parser.counter++);
                                String val = i.toString() + we.toString();
                                n1.setValue(w.toString());
                                n2.setValue(val);
                                n.addChild((Node)n1);
                                n.addChild((Node)n2);        
                                RESULT=n; 
                                :};
nBox_E2 ::= tBox:b nBox_E1:be {:
                        Node n = new Node("Declaration");
                        Node n1 = new Node("Type");
                        n1.setValue(b.toString());
                        n1.setNodeNum(parser.counter++);
                        n.setNodeNum(parser.counter++);
                        n.addChild((Node)n1);
                        n.addChild((Node)be);
                        RESULT=n; 
                        :};

//Asignacion de box despues de declarado
nBox_Assign ::= tNumberI tEndSentence
                | tTrue tEndSentence
                | tChar tEndSentence
                | tSentence tEndSentence
                | tFalse tEndSentence
                | tNumberD tEndSentence;
//Asignacion de cualquiera tipo
nAssignation ::= nAssignation_E2;
nAssignation_E1 ::= nOperations tEndSentence
                    | tChar tEndSentence
                    | tTrue tEndSentence
                    | tFalse tEndSentence
                    | tSentence tEndSentence;
nAssignation_E2 ::= tId tAssign nAssignation_E1
                    | tId tParOpen nVal_Box tParClose tAssign nBox_Assign
                    | error {:parser.report_error("Error de asignacion","Error");:} nAssignation_E1
                    | tId error {:parser.report_error("Error de asignacion","Error");:} nBox_Assign;
//Operaciones
nOperations ::= nOperations_E3;
nOperations_E1 ::= tId 
                    | tNumberI 
                    | tNumberD
                    |tParOpen nOperations_E3 tParClose;
nOperations_E2 ::= nOperations_E2 tMulti nOperations_E1
                    | nOperations_E2 tDiv nOperations_E1
                    | nOperations_E1;
nOperations_E3 ::= nOperations_E3 tAdd nOperations_E2 
                    | nOperations_E3 tSub nOperations_E2
                    | nOperations_E2;

//Sentencias de operaciones dentro del if y cicle
nSentences ::= nSentences_E1;
nSentences_E1 ::=nCompObjects tComparative nCompObjects;

//Operadores Logicos
nLogicalOpe ::= tAnd 
                | tOr;
//Sentencias usadas en varios lugares
nCompObjects ::= tId 
                |tNumberI
                |tNumberD
                |tTrue
                |tFalse;
//Sentencias para ejecutar ors y ands divididos por parentesis
nInsideComp ::= nInsideComp_E1;
nInsideComp_E1 ::= nSentences nLogicalOpe nInsideComp_E1
                    | nSentences; 

nList_DI ::= nIf nList_DI_Repeat
            | nTypes nList_DI_Repeat
            | nAssignation nList_DI_Repeat
            | nFor nList_DI_Repeat
            | nCicle nList_DI_Repeat
            | nSwap nList_DI_Repeat
            | nBox nList_DI_Repeat
            | nCallMethod nList_DI_Repeat
            | nCommetary nList_DI_Repeat;

nList_DI_Repeat ::= nList_DI | ;
//Gramatica de if
nIf ::= nIf_E2;
nInside_If ::= tInit nList_DI tEnd
                |tInit nList_DI tEnd tElse tInit nList_DI tEnd;
nIf_E1 ::= tParOpen nInsideComp tParClose nInside_If;
nIf_E2 ::= tIf nIf_E1
            | tIf error {:parser.report_error("Error en declaracion de if","Error");:} nIf_E1;

//Sentencias para operaciones dentro del for
nForSentence ::= nForSentence_E1;
nForSentence_E1 ::= nForObjectOptions tTo nForObjectOptions tEndSentence tId;

//Objetos usados dentro de la operacion del for
nForObjectOptions ::= tNumberD
                        |tNumberI
                        |tId;
//Gramatica de for
nFor ::= nFor_E2;
nInside_For ::= tInit nList_DI tEnd;
nFor_E1 ::= tParOpen nForSentence tParClose nInside_For; 
nFor_E2 ::= tFor nFor_E1
            | tFor error {:parser.report_error("Error en declaracion de for","Error");:} nFor_E1;

//Gramatica de cicle
nCicle ::= nCicle_E3;
nInside_Cicle ::= tInit nList_DI tEnd;
nCicle_E3 ::= nSentences 
                |tTrue;
nCicle_E2 ::= tParOpen nSentences tParClose nInside_Cicle;
nCicle_E3 ::= tCicle nCicle_E2
                |tCicle error {:parser.report_error("Error en declaracion de cicle","Error");:} nCicle_E2;

//Objetos usados para is
nObject_Is ::= tNumberI
                | tChar;

//Gramatica de is
nIs ::= nIs_E2;
nInside_Is ::= tInit nList_DI tEnd;
nIs_E1 ::= tParOpen nObject_Is tParClose nInside_Is;
nIs_E2 ::= tIs nIs_E1
            | tIs error {:parser.report_error("Error en declaracion de is de swap","Error");:} nIs_E1;

//Repeticion de gramatica de is
nList_Is ::= nIs nList_Is_Repeat;
nList_Is_Repeat ::= nList_Is | ;

//Gramatica de default
nDefault ::= nDefault_E1;
nInside_Default ::= tInit nList_DI tEnd;
nDefault_E1 ::= tDefault nInside_Default;

//Gramatica de swap
nSwap ::= nSwap_E2;
nInside_Swap ::= tInit nList_Is nDefault tEnd;
nSwap_E1 ::= tParOpen tId tParClose nInside_Swap; 
nSwap_E2 ::= tSwap nSwap_E1
            | tSwap error {:parser.report_error("Error en declaracion de swap","Error");:} nSwap_E1;

//Gramatica de tipos para func y parametros
nVP_Types ::= tInteger
                |tBoolean
                |tDecimal
                |tWord
                |tSymbol;
//Gramatica de parametros
nParam ::= nParam_E3;
nParam_E1 ::= tId nParam_E2 
                |tId ;
nParam_E2 ::= tComma nVP_Types nParam_E1; 
nParam_E3 ::= nVP_Types tId nParam_E2 
                |nVP_Types tId;

// Gramatica de lista de objetos que contiene solo func
nList_Func ::= nIf nList_Func_Repeat
            | nTypes nList_Func_Repeat
            | nAssignation nList_Func_Repeat
            | nFor nList_Func_Repeat
            | nCicle nList_Func_Repeat
            | nSwap nList_Func_Repeat
            | nBox nList_Func_Repeat
            | nReturn nList_Func_Repeat
            | nCallMethod nList_Func_Repeat
            | nCommetary nList_Func_Repeat;

nList_Func_Repeat ::= nList_Func | ;


//Gramatica de return
nReturn ::= tReturn nAssignation_E1;

//asignacion de valores por parametro
nParam_Value ::= tId
                |tChar
                | tTrue
                | tFalse
                | tSentence
                | tNumberD
                | tNumberI;
nAssign_Method ::= nAssign_Method_E3;
nAssign_Method_E1 ::= nParam_Value nAssign_Method_E2
                        | nParam_Value; 
nAssign_Method_E2 ::= tComma nAssign_Method_E1;
nAssign_Method_E3 ::= nParam_Value nAssign_Method_E2
                        |nParam_Value;
//Llamada de metodo
nCallMethod ::= nCallMethod_E2;
nCallMethod_E1 ::= nAssign_Method;
nCallMethod_E2 ::= tId tStapleOpen tStapleClose tEndSentence
                    |tId tStapleOpen nCallMethod_E1 tStapleClose tEndSentence
                    |tId error {:parser.report_error("Error en llamada de metodos","Error");:} tEndSentence
                    |tId tStapleOpen error {:parser.report_error("Error en llamada de metodos","Error");:} nCallMethod_E1 tStapleClose tEndSentence;

//Gramatica func
nFunc ::= nFunc_E2;
nInside_Func ::= tInit nList_Func tEnd;
nFunc_E1 ::= tParOpen nParam tParClose nInside_Func;
nFunc_E2 ::= tFunction nVP_Types tId nFunc_E1
                |tFunction {:parser.report_error("Error declaracion de funcion","Error");:} nFunc_E1;

//Gramatica void
nVoid ::= nVoid_E2;
nInside_Void ::= tInit nList_DI tEnd;
nVoid_E1 ::= tParOpen nParam tParClose nInside_Void;
nVoid_E2 ::= tVoid tId nVoid_E1
            | tVoid {:parser.report_error("Error declaracion de funcion void","Error");:} nVoid_E1;

